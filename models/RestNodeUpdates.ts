/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RestMetaToggle } from './RestMetaToggle';
import {
    RestMetaToggleFromJSON,
    RestMetaToggleFromJSONTyped,
    RestMetaToggleToJSON,
    RestMetaToggleToJSONTyped,
} from './RestMetaToggle';
import type { RestMetaUpdate } from './RestMetaUpdate';
import {
    RestMetaUpdateFromJSON,
    RestMetaUpdateFromJSONTyped,
    RestMetaUpdateToJSON,
    RestMetaUpdateToJSONTyped,
} from './RestMetaUpdate';

/**
 * 
 * @export
 * @interface RestNodeUpdates
 */
export interface RestNodeUpdates {
    /**
     * 
     * @type {RestMetaToggle}
     * @memberof RestNodeUpdates
     */
    bookmark?: RestMetaToggle;
    /**
     * 
     * @type {RestMetaToggle}
     * @memberof RestNodeUpdates
     */
    contentLock?: RestMetaToggle;
    /**
     * 
     * @type {Array<RestMetaUpdate>}
     * @memberof RestNodeUpdates
     */
    metaUpdates?: Array<RestMetaUpdate>;
}

/**
 * Check if a given object implements the RestNodeUpdates interface.
 */
export function instanceOfRestNodeUpdates(value: object): value is RestNodeUpdates {
    return true;
}

export function RestNodeUpdatesFromJSON(json: any): RestNodeUpdates {
    return RestNodeUpdatesFromJSONTyped(json, false);
}

export function RestNodeUpdatesFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestNodeUpdates {
    if (json == null) {
        return json;
    }
    return {
        
        'bookmark': json['Bookmark'] == null ? undefined : RestMetaToggleFromJSON(json['Bookmark']),
        'contentLock': json['ContentLock'] == null ? undefined : RestMetaToggleFromJSON(json['ContentLock']),
        'metaUpdates': json['MetaUpdates'] == null ? undefined : ((json['MetaUpdates'] as Array<any>).map(RestMetaUpdateFromJSON)),
    };
}

export function RestNodeUpdatesToJSON(json: any): RestNodeUpdates {
    return RestNodeUpdatesToJSONTyped(json, false);
}

export function RestNodeUpdatesToJSONTyped(value?: RestNodeUpdates | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Bookmark': RestMetaToggleToJSON(value['bookmark']),
        'ContentLock': RestMetaToggleToJSON(value['contentLock']),
        'MetaUpdates': value['metaUpdates'] == null ? undefined : ((value['metaUpdates'] as Array<any>).map(RestMetaUpdateToJSON)),
    };
}

