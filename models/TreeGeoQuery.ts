/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TreeGeoPoint } from './TreeGeoPoint';
import {
    TreeGeoPointFromJSON,
    TreeGeoPointFromJSONTyped,
    TreeGeoPointToJSON,
    TreeGeoPointToJSONTyped,
} from './TreeGeoPoint';

/**
 * 
 * @export
 * @interface TreeGeoQuery
 */
export interface TreeGeoQuery {
    /**
     * 
     * @type {TreeGeoPoint}
     * @memberof TreeGeoQuery
     */
    bottomRight?: TreeGeoPoint;
    /**
     * 
     * @type {TreeGeoPoint}
     * @memberof TreeGeoQuery
     */
    center?: TreeGeoPoint;
    /**
     * Example formats supported:
     * "5in" "5inch" "7yd" "7yards" "9ft" "9feet" "11km" "11kilometers"
     * "3nm" "3nauticalmiles" "13mm" "13millimeters" "15cm" "15centimeters"
     * "17mi" "17miles" "19m" "19meters"
     * If the unit cannot be determined, the entire string is parsed and the
     * unit of meters is assumed.
     * @type {string}
     * @memberof TreeGeoQuery
     */
    distance?: string;
    /**
     * 
     * @type {TreeGeoPoint}
     * @memberof TreeGeoQuery
     */
    topLeft?: TreeGeoPoint;
}

/**
 * Check if a given object implements the TreeGeoQuery interface.
 */
export function instanceOfTreeGeoQuery(value: object): value is TreeGeoQuery {
    return true;
}

export function TreeGeoQueryFromJSON(json: any): TreeGeoQuery {
    return TreeGeoQueryFromJSONTyped(json, false);
}

export function TreeGeoQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): TreeGeoQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'bottomRight': json['BottomRight'] == null ? undefined : TreeGeoPointFromJSON(json['BottomRight']),
        'center': json['Center'] == null ? undefined : TreeGeoPointFromJSON(json['Center']),
        'distance': json['Distance'] == null ? undefined : json['Distance'],
        'topLeft': json['TopLeft'] == null ? undefined : TreeGeoPointFromJSON(json['TopLeft']),
    };
}

export function TreeGeoQueryToJSON(json: any): TreeGeoQuery {
    return TreeGeoQueryToJSONTyped(json, false);
}

export function TreeGeoQueryToJSONTyped(value?: TreeGeoQuery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'BottomRight': TreeGeoPointToJSON(value['bottomRight']),
        'Center': TreeGeoPointToJSON(value['center']),
        'Distance': value['distance'],
        'TopLeft': TreeGeoPointToJSON(value['topLeft']),
    };
}

