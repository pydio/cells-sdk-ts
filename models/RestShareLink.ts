/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RestShareLinkAccessType } from './RestShareLinkAccessType';
import {
    RestShareLinkAccessTypeFromJSON,
    RestShareLinkAccessTypeFromJSONTyped,
    RestShareLinkAccessTypeToJSON,
    RestShareLinkAccessTypeToJSONTyped,
} from './RestShareLinkAccessType';
import type { TreeNode } from './TreeNode';
import {
    TreeNodeFromJSON,
    TreeNodeFromJSONTyped,
    TreeNodeToJSON,
    TreeNodeToJSONTyped,
} from './TreeNode';
import type { RestShareLinkTargetUser } from './RestShareLinkTargetUser';
import {
    RestShareLinkTargetUserFromJSON,
    RestShareLinkTargetUserFromJSONTyped,
    RestShareLinkTargetUserToJSON,
    RestShareLinkTargetUserToJSONTyped,
} from './RestShareLinkTargetUser';
import type { ServiceResourcePolicy } from './ServiceResourcePolicy';
import {
    ServiceResourcePolicyFromJSON,
    ServiceResourcePolicyFromJSONTyped,
    ServiceResourcePolicyToJSON,
    ServiceResourcePolicyToJSONTyped,
} from './ServiceResourcePolicy';

/**
 * 
 * @export
 * @interface RestShareLink
 */
export interface RestShareLink {
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    accessEnd?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    accessStart?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    currentDownloads?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    linkHash?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    linkUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    maxDownloads?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RestShareLink
     */
    passwordRequired?: boolean;
    /**
     * 
     * @type {Array<RestShareLinkAccessType>}
     * @memberof RestShareLink
     */
    permissions?: Array<RestShareLinkAccessType>;
    /**
     * 
     * @type {Array<ServiceResourcePolicy>}
     * @memberof RestShareLink
     */
    policies?: Array<ServiceResourcePolicy>;
    /**
     * 
     * @type {boolean}
     * @memberof RestShareLink
     */
    policiesContextEditable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RestShareLink
     */
    restrictToTargetUsers?: boolean;
    /**
     * 
     * @type {Array<TreeNode>}
     * @memberof RestShareLink
     */
    rootNodes?: Array<TreeNode>;
    /**
     * 
     * @type {{ [key: string]: RestShareLinkTargetUser; }}
     * @memberof RestShareLink
     */
    targetUsers?: { [key: string]: RestShareLinkTargetUser; };
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    userLogin?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    userUuid?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof RestShareLink
     */
    viewTemplateName?: string;
}

/**
 * Check if a given object implements the RestShareLink interface.
 */
export function instanceOfRestShareLink(value: object): value is RestShareLink {
    return true;
}

export function RestShareLinkFromJSON(json: any): RestShareLink {
    return RestShareLinkFromJSONTyped(json, false);
}

export function RestShareLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestShareLink {
    if (json == null) {
        return json;
    }
    return {
        
        'accessEnd': json['AccessEnd'] == null ? undefined : json['AccessEnd'],
        'accessStart': json['AccessStart'] == null ? undefined : json['AccessStart'],
        'currentDownloads': json['CurrentDownloads'] == null ? undefined : json['CurrentDownloads'],
        'description': json['Description'] == null ? undefined : json['Description'],
        'label': json['Label'] == null ? undefined : json['Label'],
        'linkHash': json['LinkHash'] == null ? undefined : json['LinkHash'],
        'linkUrl': json['LinkUrl'] == null ? undefined : json['LinkUrl'],
        'maxDownloads': json['MaxDownloads'] == null ? undefined : json['MaxDownloads'],
        'passwordRequired': json['PasswordRequired'] == null ? undefined : json['PasswordRequired'],
        'permissions': json['Permissions'] == null ? undefined : ((json['Permissions'] as Array<any>).map(RestShareLinkAccessTypeFromJSON)),
        'policies': json['Policies'] == null ? undefined : ((json['Policies'] as Array<any>).map(ServiceResourcePolicyFromJSON)),
        'policiesContextEditable': json['PoliciesContextEditable'] == null ? undefined : json['PoliciesContextEditable'],
        'restrictToTargetUsers': json['RestrictToTargetUsers'] == null ? undefined : json['RestrictToTargetUsers'],
        'rootNodes': json['RootNodes'] == null ? undefined : ((json['RootNodes'] as Array<any>).map(TreeNodeFromJSON)),
        'targetUsers': json['TargetUsers'] == null ? undefined : (mapValues(json['TargetUsers'], RestShareLinkTargetUserFromJSON)),
        'userLogin': json['UserLogin'] == null ? undefined : json['UserLogin'],
        'userUuid': json['UserUuid'] == null ? undefined : json['UserUuid'],
        'uuid': json['Uuid'] == null ? undefined : json['Uuid'],
        'viewTemplateName': json['ViewTemplateName'] == null ? undefined : json['ViewTemplateName'],
    };
}

export function RestShareLinkToJSON(json: any): RestShareLink {
    return RestShareLinkToJSONTyped(json, false);
}

export function RestShareLinkToJSONTyped(value?: RestShareLink | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'AccessEnd': value['accessEnd'],
        'AccessStart': value['accessStart'],
        'CurrentDownloads': value['currentDownloads'],
        'Description': value['description'],
        'Label': value['label'],
        'LinkHash': value['linkHash'],
        'LinkUrl': value['linkUrl'],
        'MaxDownloads': value['maxDownloads'],
        'PasswordRequired': value['passwordRequired'],
        'Permissions': value['permissions'] == null ? undefined : ((value['permissions'] as Array<any>).map(RestShareLinkAccessTypeToJSON)),
        'Policies': value['policies'] == null ? undefined : ((value['policies'] as Array<any>).map(ServiceResourcePolicyToJSON)),
        'PoliciesContextEditable': value['policiesContextEditable'],
        'RestrictToTargetUsers': value['restrictToTargetUsers'],
        'RootNodes': value['rootNodes'] == null ? undefined : ((value['rootNodes'] as Array<any>).map(TreeNodeToJSON)),
        'TargetUsers': value['targetUsers'] == null ? undefined : (mapValues(value['targetUsers'], RestShareLinkTargetUserToJSON)),
        'UserLogin': value['userLogin'],
        'UserUuid': value['userUuid'],
        'Uuid': value['uuid'],
        'ViewTemplateName': value['viewTemplateName'],
    };
}

