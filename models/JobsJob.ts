/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JobsJobHook } from './JobsJobHook';
import {
    JobsJobHookFromJSON,
    JobsJobHookFromJSONTyped,
    JobsJobHookToJSON,
    JobsJobHookToJSONTyped,
} from './JobsJobHook';
import type { JobsDataSourceSelector } from './JobsDataSourceSelector';
import {
    JobsDataSourceSelectorFromJSON,
    JobsDataSourceSelectorFromJSONTyped,
    JobsDataSourceSelectorToJSON,
    JobsDataSourceSelectorToJSONTyped,
} from './JobsDataSourceSelector';
import type { JobsSchedule } from './JobsSchedule';
import {
    JobsScheduleFromJSON,
    JobsScheduleFromJSONTyped,
    JobsScheduleToJSON,
    JobsScheduleToJSONTyped,
} from './JobsSchedule';
import type { JobsJobParameter } from './JobsJobParameter';
import {
    JobsJobParameterFromJSON,
    JobsJobParameterFromJSONTyped,
    JobsJobParameterToJSON,
    JobsJobParameterToJSONTyped,
} from './JobsJobParameter';
import type { JobsNodesSelector } from './JobsNodesSelector';
import {
    JobsNodesSelectorFromJSON,
    JobsNodesSelectorFromJSONTyped,
    JobsNodesSelectorToJSON,
    JobsNodesSelectorToJSONTyped,
} from './JobsNodesSelector';
import type { JobsUsersSelector } from './JobsUsersSelector';
import {
    JobsUsersSelectorFromJSON,
    JobsUsersSelectorFromJSONTyped,
    JobsUsersSelectorToJSON,
    JobsUsersSelectorToJSONTyped,
} from './JobsUsersSelector';
import type { JobsAction } from './JobsAction';
import {
    JobsActionFromJSON,
    JobsActionFromJSONTyped,
    JobsActionToJSON,
    JobsActionToJSONTyped,
} from './JobsAction';
import type { JobsContextMetaFilter } from './JobsContextMetaFilter';
import {
    JobsContextMetaFilterFromJSON,
    JobsContextMetaFilterFromJSONTyped,
    JobsContextMetaFilterToJSON,
    JobsContextMetaFilterToJSONTyped,
} from './JobsContextMetaFilter';
import type { JobsTask } from './JobsTask';
import {
    JobsTaskFromJSON,
    JobsTaskFromJSONTyped,
    JobsTaskToJSON,
    JobsTaskToJSONTyped,
} from './JobsTask';
import type { JobsIdmSelector } from './JobsIdmSelector';
import {
    JobsIdmSelectorFromJSON,
    JobsIdmSelectorFromJSONTyped,
    JobsIdmSelectorToJSON,
    JobsIdmSelectorToJSONTyped,
} from './JobsIdmSelector';
import type { ProtobufAny } from './ProtobufAny';
import {
    ProtobufAnyFromJSON,
    ProtobufAnyFromJSONTyped,
    ProtobufAnyToJSON,
    ProtobufAnyToJSONTyped,
} from './ProtobufAny';

/**
 * 
 * @export
 * @interface JobsJob
 */
export interface JobsJob {
    /**
     * 
     * @type {Array<JobsAction>}
     * @memberof JobsJob
     */
    actions?: Array<JobsAction>;
    /**
     * 
     * @type {boolean}
     * @memberof JobsJob
     */
    autoClean?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobsJob
     */
    autoRestart?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobsJob
     */
    autoStart?: boolean;
    /**
     * 
     * @type {JobsContextMetaFilter}
     * @memberof JobsJob
     */
    contextMetaFilter?: JobsContextMetaFilter;
    /**
     * 
     * @type {number}
     * @memberof JobsJob
     */
    createdAt?: number;
    /**
     * 
     * @type {boolean}
     * @memberof JobsJob
     */
    custom?: boolean;
    /**
     * 
     * @type {JobsDataSourceSelector}
     * @memberof JobsJob
     */
    dataSourceFilter?: JobsDataSourceSelector;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobsJob
     */
    eventNames?: Array<string>;
    /**
     * 
     * @type {Array<JobsJobHook>}
     * @memberof JobsJob
     */
    hooks?: Array<JobsJobHook>;
    /**
     * 
     * @type {string}
     * @memberof JobsJob
     */
    iD?: string;
    /**
     * 
     * @type {JobsIdmSelector}
     * @memberof JobsJob
     */
    idmFilter?: JobsIdmSelector;
    /**
     * 
     * @type {boolean}
     * @memberof JobsJob
     */
    inactive?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobsJob
     */
    label?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof JobsJob
     */
    languages?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof JobsJob
     */
    maxConcurrency?: number;
    /**
     * 
     * @type {JobsAction}
     * @memberof JobsJob
     */
    mergeAction?: JobsAction;
    /**
     * Additional user-defined metadata, can be used for icon, documentation, pre-requisites, etc.
     * @type {{ [key: string]: string; }}
     * @memberof JobsJob
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof JobsJob
     */
    modifiedAt?: number;
    /**
     * 
     * @type {JobsNodesSelector}
     * @memberof JobsJob
     */
    nodeEventFilter?: JobsNodesSelector;
    /**
     * 
     * @type {string}
     * @memberof JobsJob
     */
    owner?: string;
    /**
     * 
     * @type {Array<JobsJobParameter>}
     * @memberof JobsJob
     */
    parameters?: Array<JobsJobParameter>;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof JobsJob
     */
    resourcesDependencies?: Array<ProtobufAny>;
    /**
     * 
     * @type {JobsSchedule}
     * @memberof JobsJob
     */
    schedule?: JobsSchedule;
    /**
     * 
     * @type {Array<JobsTask>}
     * @memberof JobsJob
     */
    tasks?: Array<JobsTask>;
    /**
     * 
     * @type {boolean}
     * @memberof JobsJob
     */
    tasksSilentUpdate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobsJob
     */
    timeout?: string;
    /**
     * 
     * @type {JobsUsersSelector}
     * @memberof JobsJob
     */
    userEventFilter?: JobsUsersSelector;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof JobsJob
     */
    versionMeta?: { [key: string]: string; };
}

/**
 * Check if a given object implements the JobsJob interface.
 */
export function instanceOfJobsJob(value: object): value is JobsJob {
    return true;
}

export function JobsJobFromJSON(json: any): JobsJob {
    return JobsJobFromJSONTyped(json, false);
}

export function JobsJobFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobsJob {
    if (json == null) {
        return json;
    }
    return {
        
        'actions': json['Actions'] == null ? undefined : ((json['Actions'] as Array<any>).map(JobsActionFromJSON)),
        'autoClean': json['AutoClean'] == null ? undefined : json['AutoClean'],
        'autoRestart': json['AutoRestart'] == null ? undefined : json['AutoRestart'],
        'autoStart': json['AutoStart'] == null ? undefined : json['AutoStart'],
        'contextMetaFilter': json['ContextMetaFilter'] == null ? undefined : JobsContextMetaFilterFromJSON(json['ContextMetaFilter']),
        'createdAt': json['CreatedAt'] == null ? undefined : json['CreatedAt'],
        'custom': json['Custom'] == null ? undefined : json['Custom'],
        'dataSourceFilter': json['DataSourceFilter'] == null ? undefined : JobsDataSourceSelectorFromJSON(json['DataSourceFilter']),
        'eventNames': json['EventNames'] == null ? undefined : json['EventNames'],
        'hooks': json['Hooks'] == null ? undefined : ((json['Hooks'] as Array<any>).map(JobsJobHookFromJSON)),
        'iD': json['ID'] == null ? undefined : json['ID'],
        'idmFilter': json['IdmFilter'] == null ? undefined : JobsIdmSelectorFromJSON(json['IdmFilter']),
        'inactive': json['Inactive'] == null ? undefined : json['Inactive'],
        'label': json['Label'] == null ? undefined : json['Label'],
        'languages': json['Languages'] == null ? undefined : json['Languages'],
        'maxConcurrency': json['MaxConcurrency'] == null ? undefined : json['MaxConcurrency'],
        'mergeAction': json['MergeAction'] == null ? undefined : JobsActionFromJSON(json['MergeAction']),
        'metadata': json['Metadata'] == null ? undefined : json['Metadata'],
        'modifiedAt': json['ModifiedAt'] == null ? undefined : json['ModifiedAt'],
        'nodeEventFilter': json['NodeEventFilter'] == null ? undefined : JobsNodesSelectorFromJSON(json['NodeEventFilter']),
        'owner': json['Owner'] == null ? undefined : json['Owner'],
        'parameters': json['Parameters'] == null ? undefined : ((json['Parameters'] as Array<any>).map(JobsJobParameterFromJSON)),
        'resourcesDependencies': json['ResourcesDependencies'] == null ? undefined : ((json['ResourcesDependencies'] as Array<any>).map(ProtobufAnyFromJSON)),
        'schedule': json['Schedule'] == null ? undefined : JobsScheduleFromJSON(json['Schedule']),
        'tasks': json['Tasks'] == null ? undefined : ((json['Tasks'] as Array<any>).map(JobsTaskFromJSON)),
        'tasksSilentUpdate': json['TasksSilentUpdate'] == null ? undefined : json['TasksSilentUpdate'],
        'timeout': json['Timeout'] == null ? undefined : json['Timeout'],
        'userEventFilter': json['UserEventFilter'] == null ? undefined : JobsUsersSelectorFromJSON(json['UserEventFilter']),
        'versionMeta': json['VersionMeta'] == null ? undefined : json['VersionMeta'],
    };
}

export function JobsJobToJSON(json: any): JobsJob {
    return JobsJobToJSONTyped(json, false);
}

export function JobsJobToJSONTyped(value?: JobsJob | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Actions': value['actions'] == null ? undefined : ((value['actions'] as Array<any>).map(JobsActionToJSON)),
        'AutoClean': value['autoClean'],
        'AutoRestart': value['autoRestart'],
        'AutoStart': value['autoStart'],
        'ContextMetaFilter': JobsContextMetaFilterToJSON(value['contextMetaFilter']),
        'CreatedAt': value['createdAt'],
        'Custom': value['custom'],
        'DataSourceFilter': JobsDataSourceSelectorToJSON(value['dataSourceFilter']),
        'EventNames': value['eventNames'],
        'Hooks': value['hooks'] == null ? undefined : ((value['hooks'] as Array<any>).map(JobsJobHookToJSON)),
        'ID': value['iD'],
        'IdmFilter': JobsIdmSelectorToJSON(value['idmFilter']),
        'Inactive': value['inactive'],
        'Label': value['label'],
        'Languages': value['languages'],
        'MaxConcurrency': value['maxConcurrency'],
        'MergeAction': JobsActionToJSON(value['mergeAction']),
        'Metadata': value['metadata'],
        'ModifiedAt': value['modifiedAt'],
        'NodeEventFilter': JobsNodesSelectorToJSON(value['nodeEventFilter']),
        'Owner': value['owner'],
        'Parameters': value['parameters'] == null ? undefined : ((value['parameters'] as Array<any>).map(JobsJobParameterToJSON)),
        'ResourcesDependencies': value['resourcesDependencies'] == null ? undefined : ((value['resourcesDependencies'] as Array<any>).map(ProtobufAnyToJSON)),
        'Schedule': JobsScheduleToJSON(value['schedule']),
        'Tasks': value['tasks'] == null ? undefined : ((value['tasks'] as Array<any>).map(JobsTaskToJSON)),
        'TasksSilentUpdate': value['tasksSilentUpdate'],
        'Timeout': value['timeout'],
        'UserEventFilter': JobsUsersSelectorToJSON(value['userEventFilter']),
        'VersionMeta': value['versionMeta'],
    };
}

