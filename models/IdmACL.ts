/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdmACLAction } from './IdmACLAction';
import {
    IdmACLActionFromJSON,
    IdmACLActionFromJSONTyped,
    IdmACLActionToJSON,
    IdmACLActionToJSONTyped,
} from './IdmACLAction';

/**
 * ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role.
 * The context of how they apply can be fine-tuned by workspace.
 * @export
 * @interface IdmACL
 */
export interface IdmACL {
    /**
     * 
     * @type {IdmACLAction}
     * @memberof IdmACL
     */
    action?: IdmACLAction;
    /**
     * 
     * @type {string}
     * @memberof IdmACL
     */
    iD?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmACL
     */
    nodeID?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmACL
     */
    roleID?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmACL
     */
    workspaceID?: string;
}

/**
 * Check if a given object implements the IdmACL interface.
 */
export function instanceOfIdmACL(value: object): value is IdmACL {
    return true;
}

export function IdmACLFromJSON(json: any): IdmACL {
    return IdmACLFromJSONTyped(json, false);
}

export function IdmACLFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdmACL {
    if (json == null) {
        return json;
    }
    return {
        
        'action': json['Action'] == null ? undefined : IdmACLActionFromJSON(json['Action']),
        'iD': json['ID'] == null ? undefined : json['ID'],
        'nodeID': json['NodeID'] == null ? undefined : json['NodeID'],
        'roleID': json['RoleID'] == null ? undefined : json['RoleID'],
        'workspaceID': json['WorkspaceID'] == null ? undefined : json['WorkspaceID'],
    };
}

export function IdmACLToJSON(json: any): IdmACL {
    return IdmACLToJSONTyped(json, false);
}

export function IdmACLToJSONTyped(value?: IdmACL | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Action': IdmACLActionToJSON(value['action']),
        'ID': value['iD'],
        'NodeID': value['nodeID'],
        'RoleID': value['roleID'],
        'WorkspaceID': value['workspaceID'],
    };
}

