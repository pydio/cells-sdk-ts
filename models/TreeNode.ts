/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TreeWorkspaceRelativePath } from './TreeWorkspaceRelativePath';
import {
    TreeWorkspaceRelativePathFromJSON,
    TreeWorkspaceRelativePathFromJSONTyped,
    TreeWorkspaceRelativePathToJSON,
    TreeWorkspaceRelativePathToJSONTyped,
} from './TreeWorkspaceRelativePath';
import type { TreeChangeLog } from './TreeChangeLog';
import {
    TreeChangeLogFromJSON,
    TreeChangeLogFromJSONTyped,
    TreeChangeLogToJSON,
    TreeChangeLogToJSONTyped,
} from './TreeChangeLog';
import type { TreeNodeType } from './TreeNodeType';
import {
    TreeNodeTypeFromJSON,
    TreeNodeTypeFromJSONTyped,
    TreeNodeTypeToJSON,
    TreeNodeTypeToJSONTyped,
} from './TreeNodeType';

/**
 * 
 * @export
 * @interface TreeNode
 */
export interface TreeNode {
    /**
     * 
     * @type {Array<TreeWorkspaceRelativePath>}
     * @memberof TreeNode
     */
    appearsIn?: Array<TreeWorkspaceRelativePath>;
    /**
     * 
     * @type {Array<TreeChangeLog>}
     * @memberof TreeNode
     */
    commits?: Array<TreeChangeLog>;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    etag?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    mTime?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TreeNode
     */
    metaStore?: { [key: string]: string; };
    /**
     * Permission mode, like 0777. Stored as string using custom ModeString field.
     * @type {number}
     * @memberof TreeNode
     */
    mode?: number;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    modeString?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    size?: string;
    /**
     * 
     * @type {TreeNodeType}
     * @memberof TreeNode
     */
    type?: TreeNodeType;
    /**
     * 
     * @type {string}
     * @memberof TreeNode
     */
    uuid?: string;
}



/**
 * Check if a given object implements the TreeNode interface.
 */
export function instanceOfTreeNode(value: object): value is TreeNode {
    return true;
}

export function TreeNodeFromJSON(json: any): TreeNode {
    return TreeNodeFromJSONTyped(json, false);
}

export function TreeNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TreeNode {
    if (json == null) {
        return json;
    }
    return {
        
        'appearsIn': json['AppearsIn'] == null ? undefined : ((json['AppearsIn'] as Array<any>).map(TreeWorkspaceRelativePathFromJSON)),
        'commits': json['Commits'] == null ? undefined : ((json['Commits'] as Array<any>).map(TreeChangeLogFromJSON)),
        'etag': json['Etag'] == null ? undefined : json['Etag'],
        'mTime': json['MTime'] == null ? undefined : json['MTime'],
        'metaStore': json['MetaStore'] == null ? undefined : json['MetaStore'],
        'mode': json['Mode'] == null ? undefined : json['Mode'],
        'modeString': json['ModeString'] == null ? undefined : json['ModeString'],
        'path': json['Path'] == null ? undefined : json['Path'],
        'size': json['Size'] == null ? undefined : json['Size'],
        'type': json['Type'] == null ? undefined : TreeNodeTypeFromJSON(json['Type']),
        'uuid': json['Uuid'] == null ? undefined : json['Uuid'],
    };
}

export function TreeNodeToJSON(json: any): TreeNode {
    return TreeNodeToJSONTyped(json, false);
}

export function TreeNodeToJSONTyped(value?: TreeNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'AppearsIn': value['appearsIn'] == null ? undefined : ((value['appearsIn'] as Array<any>).map(TreeWorkspaceRelativePathToJSON)),
        'Commits': value['commits'] == null ? undefined : ((value['commits'] as Array<any>).map(TreeChangeLogToJSON)),
        'Etag': value['etag'],
        'MTime': value['mTime'],
        'MetaStore': value['metaStore'],
        'Mode': value['mode'],
        'ModeString': value['modeString'],
        'Path': value['path'],
        'Size': value['size'],
        'Type': TreeNodeTypeToJSON(value['type']),
        'Uuid': value['uuid'],
    };
}

