/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TreeNode } from './TreeNode';
import {
    TreeNodeFromJSON,
    TreeNodeFromJSONTyped,
    TreeNodeToJSON,
    TreeNodeToJSONTyped,
} from './TreeNode';
import type { IdmWorkspaceScope } from './IdmWorkspaceScope';
import {
    IdmWorkspaceScopeFromJSON,
    IdmWorkspaceScopeFromJSONTyped,
    IdmWorkspaceScopeToJSON,
    IdmWorkspaceScopeToJSONTyped,
} from './IdmWorkspaceScope';
import type { ServiceResourcePolicy } from './ServiceResourcePolicy';
import {
    ServiceResourcePolicyFromJSON,
    ServiceResourcePolicyFromJSONTyped,
    ServiceResourcePolicyToJSON,
    ServiceResourcePolicyToJSONTyped,
} from './ServiceResourcePolicy';

/**
 * A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.
 * @export
 * @interface IdmWorkspace
 */
export interface IdmWorkspace {
    /**
     * 
     * @type {string}
     * @memberof IdmWorkspace
     */
    attributes?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmWorkspace
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmWorkspace
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof IdmWorkspace
     */
    lastUpdated?: number;
    /**
     * 
     * @type {Array<ServiceResourcePolicy>}
     * @memberof IdmWorkspace
     */
    policies?: Array<ServiceResourcePolicy>;
    /**
     * 
     * @type {boolean}
     * @memberof IdmWorkspace
     */
    policiesContextEditable?: boolean;
    /**
     * 
     * @type {{ [key: string]: TreeNode; }}
     * @memberof IdmWorkspace
     */
    rootNodes?: { [key: string]: TreeNode; };
    /**
     * 
     * @type {Array<string>}
     * @memberof IdmWorkspace
     */
    rootUUIDs?: Array<string>;
    /**
     * 
     * @type {IdmWorkspaceScope}
     * @memberof IdmWorkspace
     */
    scope?: IdmWorkspaceScope;
    /**
     * 
     * @type {string}
     * @memberof IdmWorkspace
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmWorkspace
     */
    uUID?: string;
}



/**
 * Check if a given object implements the IdmWorkspace interface.
 */
export function instanceOfIdmWorkspace(value: object): value is IdmWorkspace {
    return true;
}

export function IdmWorkspaceFromJSON(json: any): IdmWorkspace {
    return IdmWorkspaceFromJSONTyped(json, false);
}

export function IdmWorkspaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdmWorkspace {
    if (json == null) {
        return json;
    }
    return {
        
        'attributes': json['Attributes'] == null ? undefined : json['Attributes'],
        'description': json['Description'] == null ? undefined : json['Description'],
        'label': json['Label'] == null ? undefined : json['Label'],
        'lastUpdated': json['LastUpdated'] == null ? undefined : json['LastUpdated'],
        'policies': json['Policies'] == null ? undefined : ((json['Policies'] as Array<any>).map(ServiceResourcePolicyFromJSON)),
        'policiesContextEditable': json['PoliciesContextEditable'] == null ? undefined : json['PoliciesContextEditable'],
        'rootNodes': json['RootNodes'] == null ? undefined : (mapValues(json['RootNodes'], TreeNodeFromJSON)),
        'rootUUIDs': json['RootUUIDs'] == null ? undefined : json['RootUUIDs'],
        'scope': json['Scope'] == null ? undefined : IdmWorkspaceScopeFromJSON(json['Scope']),
        'slug': json['Slug'] == null ? undefined : json['Slug'],
        'uUID': json['UUID'] == null ? undefined : json['UUID'],
    };
}

export function IdmWorkspaceToJSON(json: any): IdmWorkspace {
    return IdmWorkspaceToJSONTyped(json, false);
}

export function IdmWorkspaceToJSONTyped(value?: IdmWorkspace | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Attributes': value['attributes'],
        'Description': value['description'],
        'Label': value['label'],
        'LastUpdated': value['lastUpdated'],
        'Policies': value['policies'] == null ? undefined : ((value['policies'] as Array<any>).map(ServiceResourcePolicyToJSON)),
        'PoliciesContextEditable': value['policiesContextEditable'],
        'RootNodes': value['rootNodes'] == null ? undefined : (mapValues(value['rootNodes'], TreeNodeToJSON)),
        'RootUUIDs': value['rootUUIDs'],
        'Scope': IdmWorkspaceScopeToJSON(value['scope']),
        'Slug': value['slug'],
        'UUID': value['uUID'],
    };
}

