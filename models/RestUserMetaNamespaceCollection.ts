/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdmUserMetaNamespace } from './IdmUserMetaNamespace';
import {
    IdmUserMetaNamespaceFromJSON,
    IdmUserMetaNamespaceFromJSONTyped,
    IdmUserMetaNamespaceToJSON,
    IdmUserMetaNamespaceToJSONTyped,
} from './IdmUserMetaNamespace';

/**
 * 
 * @export
 * @interface RestUserMetaNamespaceCollection
 */
export interface RestUserMetaNamespaceCollection {
    /**
     * 
     * @type {Array<IdmUserMetaNamespace>}
     * @memberof RestUserMetaNamespaceCollection
     */
    namespaces?: Array<IdmUserMetaNamespace>;
}

/**
 * Check if a given object implements the RestUserMetaNamespaceCollection interface.
 */
export function instanceOfRestUserMetaNamespaceCollection(value: object): value is RestUserMetaNamespaceCollection {
    return true;
}

export function RestUserMetaNamespaceCollectionFromJSON(json: any): RestUserMetaNamespaceCollection {
    return RestUserMetaNamespaceCollectionFromJSONTyped(json, false);
}

export function RestUserMetaNamespaceCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestUserMetaNamespaceCollection {
    if (json == null) {
        return json;
    }
    return {
        
        'namespaces': json['Namespaces'] == null ? undefined : ((json['Namespaces'] as Array<any>).map(IdmUserMetaNamespaceFromJSON)),
    };
}

export function RestUserMetaNamespaceCollectionToJSON(json: any): RestUserMetaNamespaceCollection {
    return RestUserMetaNamespaceCollectionToJSONTyped(json, false);
}

export function RestUserMetaNamespaceCollectionToJSONTyped(value?: RestUserMetaNamespaceCollection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Namespaces': value['namespaces'] == null ? undefined : ((value['namespaces'] as Array<any>).map(IdmUserMetaNamespaceToJSON)),
    };
}

