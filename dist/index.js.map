{"version":3,"sources":["../index.ts","../api/node-service-api.ts","../base.ts","../common.ts","../configuration.ts","../models/activity-object-type.ts","../models/activity-owner-type.ts","../models/idm-workspace-scope.ts","../models/jobs-command.ts","../models/jobs-task-status.ts","../models/meta-update-op.ts","../models/rest-action-status.ts","../models/rest-flag.ts","../models/rest-mode.ts","../models/rest-ns-op.ts","../models/rest-share-link-access-type.ts","../models/rest-user-action-type.ts","../models/rest-versions-types.ts","../models/service-resource-policy-action.ts","../models/service-resource-policy-policy-effect.ts","../models/tree-node-change-event-event-type.ts","../models/tree-node-type.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\nexport * from \"./models\";\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport type { IdmSearchUserMetaRequest } from '../models';\n// @ts-ignore\nimport type { JobsCtrlCommand } from '../models';\n// @ts-ignore\nimport type { RestActionParameters } from '../models';\n// @ts-ignore\nimport type { RestBackgroundAction } from '../models';\n// @ts-ignore\nimport type { RestBatchUpdateMetaList } from '../models';\n// @ts-ignore\nimport type { RestCreateCheckRequest } from '../models';\n// @ts-ignore\nimport type { RestCreateCheckResponse } from '../models';\n// @ts-ignore\nimport type { RestCreateRequest } from '../models';\n// @ts-ignore\nimport type { RestDeleteVersionResponse } from '../models';\n// @ts-ignore\nimport type { RestError } from '../models';\n// @ts-ignore\nimport type { RestListTemplatesResponse } from '../models';\n// @ts-ignore\nimport type { RestLookupRequest } from '../models';\n// @ts-ignore\nimport type { RestNamespaceValuesOperation } from '../models';\n// @ts-ignore\nimport type { RestNamespaceValuesResponse } from '../models';\n// @ts-ignore\nimport type { RestNode } from '../models';\n// @ts-ignore\nimport type { RestNodeCollection } from '../models';\n// @ts-ignore\nimport type { RestNodeUpdates } from '../models';\n// @ts-ignore\nimport type { RestNodeVersionsFilter } from '../models';\n// @ts-ignore\nimport type { RestPerformActionResponse } from '../models';\n// @ts-ignore\nimport type { RestPromoteParameters } from '../models';\n// @ts-ignore\nimport type { RestPromoteVersionResponse } from '../models';\n// @ts-ignore\nimport type { RestPublicLinkDeleteSuccess } from '../models';\n// @ts-ignore\nimport type { RestPublicLinkRequest } from '../models';\n// @ts-ignore\nimport type { RestPublishNodeParameters } from '../models';\n// @ts-ignore\nimport type { RestPublishNodeResponse } from '../models';\n// @ts-ignore\nimport type { RestSelection } from '../models';\n// @ts-ignore\nimport type { RestShareLink } from '../models';\n// @ts-ignore\nimport type { RestUserMetaList } from '../models';\n// @ts-ignore\nimport type { RestUserMetaNamespaceCollection } from '../models';\n// @ts-ignore\nimport type { RestVersionCollection } from '../models';\n/**\n * NodeServiceApi - axios parameter creator\n * @export\n */\nexport const NodeServiceApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Retrieve information about an action running in background\n         * @param {BackgroundActionInfoNameEnum} name \n         * @param {string} jobUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        backgroundActionInfo: async (name: BackgroundActionInfoNameEnum, jobUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('backgroundActionInfo', 'name', name)\n            // verify required parameter 'jobUuid' is not null or undefined\n            assertParamExists('backgroundActionInfo', 'jobUuid', jobUuid)\n            const localVarPath = `/n/action/{Name}/{JobUuid}`\n                .replace(`{${\"Name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"JobUuid\"}}`, encodeURIComponent(String(jobUuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid\n         * @param {RestBatchUpdateMetaList} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchUpdateMeta: async (body: RestBatchUpdateMetaList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('batchUpdateMeta', 'body', body)\n            const localVarPath = `/n/meta/batch`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Send control commands to a background job\n         * @param {ControlBackgroundActionNameEnum} name \n         * @param {string} jobUuid \n         * @param {JobsCtrlCommand} command \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        controlBackgroundAction: async (name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('controlBackgroundAction', 'name', name)\n            // verify required parameter 'jobUuid' is not null or undefined\n            assertParamExists('controlBackgroundAction', 'jobUuid', jobUuid)\n            // verify required parameter 'command' is not null or undefined\n            assertParamExists('controlBackgroundAction', 'command', command)\n            const localVarPath = `/n/action/{Name}/{JobUuid}`\n                .replace(`{${\"Name\"}}`, encodeURIComponent(String(name)))\n                .replace(`{${\"JobUuid\"}}`, encodeURIComponent(String(jobUuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders\n         * @param {RestCreateRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create: async (body: RestCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('create', 'body', body)\n            const localVarPath = `/n/nodes/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Apply some pre-validation checks on node name before sending an upload\n         * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCheck: async (body: RestCreateCheckRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('createCheck', 'body', body)\n            const localVarPath = `/n/nodes/create/precheck`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a public link on a given node\n         * @param {string} uuid \n         * @param {RestPublicLinkRequest} publicLinkRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPublicLink: async (uuid: string, publicLinkRequest: RestPublicLinkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('createPublicLink', 'uuid', uuid)\n            // verify required parameter 'publicLinkRequest' is not null or undefined\n            assertParamExists('createPublicLink', 'publicLinkRequest', publicLinkRequest)\n            const localVarPath = `/n/node/{Uuid}/link`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(publicLinkRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create and persist a temporary selection of nodes, that can be used by other actions\n         * @param {RestSelection} body Request to create a selection from a list of nodes.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSelection: async (body: RestSelection, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('createSelection', 'body', body)\n            const localVarPath = `/n/selection`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Remove a public link\n         * @param {string} linkUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePublicLink: async (linkUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'linkUuid' is not null or undefined\n            assertParamExists('deletePublicLink', 'linkUuid', linkUuid)\n            const localVarPath = `/n/link/{LinkUuid}`\n                .replace(`{${\"LinkUuid\"}}`, encodeURIComponent(String(linkUuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a version by its ID\n         * @param {string} uuid \n         * @param {string} versionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteVersion: async (uuid: string, versionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('deleteVersion', 'uuid', uuid)\n            // verify required parameter 'versionId' is not null or undefined\n            assertParamExists('deleteVersion', 'versionId', versionId)\n            const localVarPath = `/n/node/{Uuid}/versions/{VersionId}`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)))\n                .replace(`{${\"VersionId\"}}`, encodeURIComponent(String(versionId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Load a node by its Uuid\n         * @param {string} uuid \n         * @param {string} [path] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getByUuid: async (uuid: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('getByUuid', 'uuid', uuid)\n            const localVarPath = `/n/node/{Uuid}`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (path !== undefined) {\n                localVarQueryParameter['Path'] = path;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Load public link information by Uuid\n         * @param {string} linkUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicLink: async (linkUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'linkUuid' is not null or undefined\n            assertParamExists('getPublicLink', 'linkUuid', linkUuid)\n            const localVarPath = `/n/link/{LinkUuid}`\n                .replace(`{${\"LinkUuid\"}}`, encodeURIComponent(String(linkUuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List values for a given namespace\n         * @param {string} namespace List persisted values for this namespace\n         * @param {ListNamespaceValuesOperationOperationEnum} operationOperation \n         * @param {Array<string>} operationValues \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listNamespaceValues: async (namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'namespace' is not null or undefined\n            assertParamExists('listNamespaceValues', 'namespace', namespace)\n            // verify required parameter 'operationOperation' is not null or undefined\n            assertParamExists('listNamespaceValues', 'operationOperation', operationOperation)\n            // verify required parameter 'operationValues' is not null or undefined\n            assertParamExists('listNamespaceValues', 'operationValues', operationValues)\n            const localVarPath = `/n/meta/namespace/{Namespace}`\n                .replace(`{${\"Namespace\"}}`, encodeURIComponent(String(namespace)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (operationOperation !== undefined) {\n                localVarQueryParameter['Operation.Operation'] = operationOperation;\n            }\n\n            if (operationValues) {\n                localVarQueryParameter['Operation.Values'] = operationValues;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List defined meta namespaces\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listNamespaces: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/n/meta/namespace`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Generic request to either list (using Locators) or search (using Query) for nodes\n         * @param {RestLookupRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        lookup: async (body: RestLookupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('lookup', 'body', body)\n            const localVarPath = `/n/nodes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List all known versions of a node\n         * @param {string} uuid The node Uuid\n         * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        nodeVersions: async (uuid: string, query: RestNodeVersionsFilter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('nodeVersions', 'uuid', uuid)\n            // verify required parameter 'query' is not null or undefined\n            assertParamExists('nodeVersions', 'query', query)\n            const localVarPath = `/n/node/{Uuid}/versions`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)\n         * @param {string} uuid \n         * @param {RestNodeUpdates} nodeUpdates \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchNode: async (uuid: string, nodeUpdates: RestNodeUpdates, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('patchNode', 'uuid', uuid)\n            // verify required parameter 'nodeUpdates' is not null or undefined\n            assertParamExists('patchNode', 'nodeUpdates', nodeUpdates)\n            const localVarPath = `/n/node/{Uuid}`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(nodeUpdates, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.\n         * @param {PerformActionNameEnum} name \n         * @param {RestActionParameters} parameters \n         * @param {string} [jobUuid] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        performAction: async (name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'name' is not null or undefined\n            assertParamExists('performAction', 'name', name)\n            // verify required parameter 'parameters' is not null or undefined\n            assertParamExists('performAction', 'parameters', parameters)\n            const localVarPath = `/n/action/{Name}`\n                .replace(`{${\"Name\"}}`, encodeURIComponent(String(name)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (jobUuid !== undefined) {\n                localVarQueryParameter['JobUuid'] = jobUuid;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Promotes a version by ID to be the publicly available content of the node - files only\n         * @param {string} uuid \n         * @param {string} versionId \n         * @param {RestPromoteParameters} parameters \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        promoteVersion: async (uuid: string, versionId: string, parameters: RestPromoteParameters, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('promoteVersion', 'uuid', uuid)\n            // verify required parameter 'versionId' is not null or undefined\n            assertParamExists('promoteVersion', 'versionId', versionId)\n            // verify required parameter 'parameters' is not null or undefined\n            assertParamExists('promoteVersion', 'parameters', parameters)\n            const localVarPath = `/n/node/{Uuid}/versions/{VersionId}/promote`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)))\n                .replace(`{${\"VersionId\"}}`, encodeURIComponent(String(versionId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Unset draft status of a resource, typically to publish a folder in draft mode\n         * @param {string} uuid \n         * @param {RestPublishNodeParameters} parameters \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        publishNode: async (uuid: string, parameters: RestPublishNodeParameters, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'uuid' is not null or undefined\n            assertParamExists('publishNode', 'uuid', uuid)\n            // verify required parameter 'parameters' is not null or undefined\n            assertParamExists('publishNode', 'parameters', parameters)\n            const localVarPath = `/n/node/{Uuid}/publish`\n                .replace(`{${\"Uuid\"}}`, encodeURIComponent(String(uuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Search a list of meta by node Id or by User id and by namespace\n         * @param {IdmSearchUserMetaRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchMeta: async (body: IdmSearchUserMetaRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('searchMeta', 'body', body)\n            const localVarPath = `/n/meta/find`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List available templates for hydrating empty files\n         * @param {string} [templateType] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        templates: async (templateType?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/n/templates`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (templateType !== undefined) {\n                localVarQueryParameter['TemplateType'] = templateType;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Add/delete a values for a given namespace\n         * @param {string} namespace List persisted values for this namespace\n         * @param {RestNamespaceValuesOperation} operation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateNamespaceValues: async (namespace: string, operation: RestNamespaceValuesOperation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'namespace' is not null or undefined\n            assertParamExists('updateNamespaceValues', 'namespace', namespace)\n            // verify required parameter 'operation' is not null or undefined\n            assertParamExists('updateNamespaceValues', 'operation', operation)\n            const localVarPath = `/n/meta/namespace/{Namespace}`\n                .replace(`{${\"Namespace\"}}`, encodeURIComponent(String(namespace)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(operation, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update public link settings\n         * @param {string} linkUuid \n         * @param {RestPublicLinkRequest} publicLinkRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePublicLink: async (linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'linkUuid' is not null or undefined\n            assertParamExists('updatePublicLink', 'linkUuid', linkUuid)\n            // verify required parameter 'publicLinkRequest' is not null or undefined\n            assertParamExists('updatePublicLink', 'publicLinkRequest', publicLinkRequest)\n            const localVarPath = `/n/link/{LinkUuid}`\n                .replace(`{${\"LinkUuid\"}}`, encodeURIComponent(String(linkUuid)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(publicLinkRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n         * @param {boolean} [all] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userBookmarks: async (all?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/n/nodes/bookmarks`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (all !== undefined) {\n                localVarQueryParameter['All'] = all;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * NodeServiceApi - functional programming interface\n * @export\n */\nexport const NodeServiceApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = NodeServiceApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Retrieve information about an action running in background\n         * @param {BackgroundActionInfoNameEnum} name \n         * @param {string} jobUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestBackgroundAction>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.backgroundActionInfo(name, jobUuid, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.backgroundActionInfo']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid\n         * @param {RestBatchUpdateMetaList} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestBatchUpdateMetaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.batchUpdateMeta(body, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.batchUpdateMeta']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Send control commands to a background job\n         * @param {ControlBackgroundActionNameEnum} name \n         * @param {string} jobUuid \n         * @param {JobsCtrlCommand} command \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestBackgroundAction>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.controlBackgroundAction(name, jobUuid, command, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.controlBackgroundAction']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders\n         * @param {RestCreateRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async create(body: RestCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNodeCollection>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.create']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Apply some pre-validation checks on node name before sending an upload\n         * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestCreateCheckResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheck(body, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.createCheck']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Create a public link on a given node\n         * @param {string} uuid \n         * @param {RestPublicLinkRequest} publicLinkRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestShareLink>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createPublicLink(uuid, publicLinkRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.createPublicLink']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Create and persist a temporary selection of nodes, that can be used by other actions\n         * @param {RestSelection} body Request to create a selection from a list of nodes.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createSelection(body: RestSelection, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestSelection>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createSelection(body, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.createSelection']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Remove a public link\n         * @param {string} linkUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPublicLinkDeleteSuccess>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePublicLink(linkUuid, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.deletePublicLink']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Delete a version by its ID\n         * @param {string} uuid \n         * @param {string} versionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestDeleteVersionResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVersion(uuid, versionId, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.deleteVersion']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Load a node by its Uuid\n         * @param {string} uuid \n         * @param {string} [path] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getByUuid(uuid, path, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.getByUuid']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Load public link information by Uuid\n         * @param {string} linkUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestShareLink>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicLink(linkUuid, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.getPublicLink']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary List values for a given namespace\n         * @param {string} namespace List persisted values for this namespace\n         * @param {ListNamespaceValuesOperationOperationEnum} operationOperation \n         * @param {Array<string>} operationValues \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNamespaceValuesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listNamespaceValues(namespace, operationOperation, operationValues, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.listNamespaceValues']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary List defined meta namespaces\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listNamespaces(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestUserMetaNamespaceCollection>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listNamespaces(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.listNamespaces']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Generic request to either list (using Locators) or search (using Query) for nodes\n         * @param {RestLookupRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNodeCollection>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.lookup(body, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.lookup']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary List all known versions of a node\n         * @param {string} uuid The node Uuid\n         * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestVersionCollection>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.nodeVersions(uuid, query, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.nodeVersions']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)\n         * @param {string} uuid \n         * @param {RestNodeUpdates} nodeUpdates \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNode>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.patchNode(uuid, nodeUpdates, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.patchNode']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.\n         * @param {PerformActionNameEnum} name \n         * @param {RestActionParameters} parameters \n         * @param {string} [jobUuid] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPerformActionResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.performAction(name, parameters, jobUuid, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.performAction']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Promotes a version by ID to be the publicly available content of the node - files only\n         * @param {string} uuid \n         * @param {string} versionId \n         * @param {RestPromoteParameters} parameters \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPromoteVersionResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.promoteVersion(uuid, versionId, parameters, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.promoteVersion']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Unset draft status of a resource, typically to publish a folder in draft mode\n         * @param {string} uuid \n         * @param {RestPublishNodeParameters} parameters \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPublishNodeResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNode(uuid, parameters, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.publishNode']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Search a list of meta by node Id or by User id and by namespace\n         * @param {IdmSearchUserMetaRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestUserMetaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMeta(body, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.searchMeta']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary List available templates for hydrating empty files\n         * @param {string} [templateType] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async templates(templateType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestListTemplatesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.templates(templateType, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.templates']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Add/delete a values for a given namespace\n         * @param {string} namespace List persisted values for this namespace\n         * @param {RestNamespaceValuesOperation} operation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNamespaceValuesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNamespaceValues(namespace, operation, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.updateNamespaceValues']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Update public link settings\n         * @param {string} linkUuid \n         * @param {RestPublicLinkRequest} publicLinkRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestShareLink>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePublicLink(linkUuid, publicLinkRequest, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.updatePublicLink']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n         * @param {boolean} [all] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNodeCollection>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.userBookmarks(all, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['NodeServiceApi.userBookmarks']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * NodeServiceApi - factory interface\n * @export\n */\nexport const NodeServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = NodeServiceApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Retrieve information about an action running in background\n         * @param {BackgroundActionInfoNameEnum} name \n         * @param {string} jobUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction> {\n            return localVarFp.backgroundActionInfo(name, jobUuid, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid\n         * @param {RestBatchUpdateMetaList} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): AxiosPromise<RestBatchUpdateMetaList> {\n            return localVarFp.batchUpdateMeta(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Send control commands to a background job\n         * @param {ControlBackgroundActionNameEnum} name \n         * @param {string} jobUuid \n         * @param {JobsCtrlCommand} command \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction> {\n            return localVarFp.controlBackgroundAction(name, jobUuid, command, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders\n         * @param {RestCreateRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create(body: RestCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection> {\n            return localVarFp.create(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Apply some pre-validation checks on node name before sending an upload\n         * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestCreateCheckResponse> {\n            return localVarFp.createCheck(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a public link on a given node\n         * @param {string} uuid \n         * @param {RestPublicLinkRequest} publicLinkRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink> {\n            return localVarFp.createPublicLink(uuid, publicLinkRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create and persist a temporary selection of nodes, that can be used by other actions\n         * @param {RestSelection} body Request to create a selection from a list of nodes.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createSelection(body: RestSelection, options?: RawAxiosRequestConfig): AxiosPromise<RestSelection> {\n            return localVarFp.createSelection(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Remove a public link\n         * @param {string} linkUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPublicLinkDeleteSuccess> {\n            return localVarFp.deletePublicLink(linkUuid, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a version by its ID\n         * @param {string} uuid \n         * @param {string} versionId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): AxiosPromise<RestDeleteVersionResponse> {\n            return localVarFp.deleteVersion(uuid, versionId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Load a node by its Uuid\n         * @param {string} uuid \n         * @param {string} [path] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestNode> {\n            return localVarFp.getByUuid(uuid, path, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Load public link information by Uuid\n         * @param {string} linkUuid \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink> {\n            return localVarFp.getPublicLink(linkUuid, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List values for a given namespace\n         * @param {string} namespace List persisted values for this namespace\n         * @param {ListNamespaceValuesOperationOperationEnum} operationOperation \n         * @param {Array<string>} operationValues \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse> {\n            return localVarFp.listNamespaceValues(namespace, operationOperation, operationValues, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List defined meta namespaces\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listNamespaces(options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaNamespaceCollection> {\n            return localVarFp.listNamespaces(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Generic request to either list (using Locators) or search (using Query) for nodes\n         * @param {RestLookupRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection> {\n            return localVarFp.lookup(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List all known versions of a node\n         * @param {string} uuid The node Uuid\n         * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): AxiosPromise<RestVersionCollection> {\n            return localVarFp.nodeVersions(uuid, query, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)\n         * @param {string} uuid \n         * @param {RestNodeUpdates} nodeUpdates \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): AxiosPromise<RestNode> {\n            return localVarFp.patchNode(uuid, nodeUpdates, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.\n         * @param {PerformActionNameEnum} name \n         * @param {RestActionParameters} parameters \n         * @param {string} [jobUuid] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPerformActionResponse> {\n            return localVarFp.performAction(name, parameters, jobUuid, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Promotes a version by ID to be the publicly available content of the node - files only\n         * @param {string} uuid \n         * @param {string} versionId \n         * @param {RestPromoteParameters} parameters \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPromoteVersionResponse> {\n            return localVarFp.promoteVersion(uuid, versionId, parameters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Unset draft status of a resource, typically to publish a folder in draft mode\n         * @param {string} uuid \n         * @param {RestPublishNodeParameters} parameters \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPublishNodeResponse> {\n            return localVarFp.publishNode(uuid, parameters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Search a list of meta by node Id or by User id and by namespace\n         * @param {IdmSearchUserMetaRequest} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaList> {\n            return localVarFp.searchMeta(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List available templates for hydrating empty files\n         * @param {string} [templateType] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        templates(templateType?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestListTemplatesResponse> {\n            return localVarFp.templates(templateType, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Add/delete a values for a given namespace\n         * @param {string} namespace List persisted values for this namespace\n         * @param {RestNamespaceValuesOperation} operation \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse> {\n            return localVarFp.updateNamespaceValues(namespace, operation, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update public link settings\n         * @param {string} linkUuid \n         * @param {RestPublicLinkRequest} publicLinkRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink> {\n            return localVarFp.updatePublicLink(linkUuid, publicLinkRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n         * @param {boolean} [all] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection> {\n            return localVarFp.userBookmarks(all, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * NodeServiceApi - interface\n * @export\n * @interface NodeServiceApi\n */\nexport interface NodeServiceApiInterface {\n    /**\n     * \n     * @summary Retrieve information about an action running in background\n     * @param {BackgroundActionInfoNameEnum} name \n     * @param {string} jobUuid \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction>;\n\n    /**\n     * \n     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid\n     * @param {RestBatchUpdateMetaList} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): AxiosPromise<RestBatchUpdateMetaList>;\n\n    /**\n     * \n     * @summary Send control commands to a background job\n     * @param {ControlBackgroundActionNameEnum} name \n     * @param {string} jobUuid \n     * @param {JobsCtrlCommand} command \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction>;\n\n    /**\n     * \n     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders\n     * @param {RestCreateRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    create(body: RestCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;\n\n    /**\n     * \n     * @summary Apply some pre-validation checks on node name before sending an upload\n     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestCreateCheckResponse>;\n\n    /**\n     * \n     * @summary Create a public link on a given node\n     * @param {string} uuid \n     * @param {RestPublicLinkRequest} publicLinkRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;\n\n    /**\n     * \n     * @summary Create and persist a temporary selection of nodes, that can be used by other actions\n     * @param {RestSelection} body Request to create a selection from a list of nodes.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    createSelection(body: RestSelection, options?: RawAxiosRequestConfig): AxiosPromise<RestSelection>;\n\n    /**\n     * \n     * @summary Remove a public link\n     * @param {string} linkUuid \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPublicLinkDeleteSuccess>;\n\n    /**\n     * \n     * @summary Delete a version by its ID\n     * @param {string} uuid \n     * @param {string} versionId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): AxiosPromise<RestDeleteVersionResponse>;\n\n    /**\n     * \n     * @summary Load a node by its Uuid\n     * @param {string} uuid \n     * @param {string} [path] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestNode>;\n\n    /**\n     * \n     * @summary Load public link information by Uuid\n     * @param {string} linkUuid \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;\n\n    /**\n     * \n     * @summary List values for a given namespace\n     * @param {string} namespace List persisted values for this namespace\n     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation \n     * @param {Array<string>} operationValues \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse>;\n\n    /**\n     * \n     * @summary List defined meta namespaces\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    listNamespaces(options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaNamespaceCollection>;\n\n    /**\n     * \n     * @summary Generic request to either list (using Locators) or search (using Query) for nodes\n     * @param {RestLookupRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;\n\n    /**\n     * \n     * @summary List all known versions of a node\n     * @param {string} uuid The node Uuid\n     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): AxiosPromise<RestVersionCollection>;\n\n    /**\n     * \n     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)\n     * @param {string} uuid \n     * @param {RestNodeUpdates} nodeUpdates \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): AxiosPromise<RestNode>;\n\n    /**\n     * \n     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.\n     * @param {PerformActionNameEnum} name \n     * @param {RestActionParameters} parameters \n     * @param {string} [jobUuid] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPerformActionResponse>;\n\n    /**\n     * \n     * @summary Promotes a version by ID to be the publicly available content of the node - files only\n     * @param {string} uuid \n     * @param {string} versionId \n     * @param {RestPromoteParameters} parameters \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPromoteVersionResponse>;\n\n    /**\n     * \n     * @summary Unset draft status of a resource, typically to publish a folder in draft mode\n     * @param {string} uuid \n     * @param {RestPublishNodeParameters} parameters \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPublishNodeResponse>;\n\n    /**\n     * \n     * @summary Search a list of meta by node Id or by User id and by namespace\n     * @param {IdmSearchUserMetaRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaList>;\n\n    /**\n     * \n     * @summary List available templates for hydrating empty files\n     * @param {string} [templateType] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    templates(templateType?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestListTemplatesResponse>;\n\n    /**\n     * \n     * @summary Add/delete a values for a given namespace\n     * @param {string} namespace List persisted values for this namespace\n     * @param {RestNamespaceValuesOperation} operation \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse>;\n\n    /**\n     * \n     * @summary Update public link settings\n     * @param {string} linkUuid \n     * @param {RestPublicLinkRequest} publicLinkRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;\n\n    /**\n     * \n     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n     * @param {boolean} [all] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApiInterface\n     */\n    userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;\n\n}\n\n/**\n * NodeServiceApi - object-oriented interface\n * @export\n * @class NodeServiceApi\n * @extends {BaseAPI}\n */\nexport class NodeServiceApi extends BaseAPI implements NodeServiceApiInterface {\n    /**\n     * \n     * @summary Retrieve information about an action running in background\n     * @param {BackgroundActionInfoNameEnum} name \n     * @param {string} jobUuid \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).backgroundActionInfo(name, jobUuid, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid\n     * @param {RestBatchUpdateMetaList} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).batchUpdateMeta(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Send control commands to a background job\n     * @param {ControlBackgroundActionNameEnum} name \n     * @param {string} jobUuid \n     * @param {JobsCtrlCommand} command \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).controlBackgroundAction(name, jobUuid, command, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders\n     * @param {RestCreateRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public create(body: RestCreateRequest, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).create(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Apply some pre-validation checks on node name before sending an upload\n     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).createCheck(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a public link on a given node\n     * @param {string} uuid \n     * @param {RestPublicLinkRequest} publicLinkRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).createPublicLink(uuid, publicLinkRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create and persist a temporary selection of nodes, that can be used by other actions\n     * @param {RestSelection} body Request to create a selection from a list of nodes.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public createSelection(body: RestSelection, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).createSelection(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Remove a public link\n     * @param {string} linkUuid \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).deletePublicLink(linkUuid, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a version by its ID\n     * @param {string} uuid \n     * @param {string} versionId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).deleteVersion(uuid, versionId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Load a node by its Uuid\n     * @param {string} uuid \n     * @param {string} [path] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).getByUuid(uuid, path, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Load public link information by Uuid\n     * @param {string} linkUuid \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).getPublicLink(linkUuid, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List values for a given namespace\n     * @param {string} namespace List persisted values for this namespace\n     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation \n     * @param {Array<string>} operationValues \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).listNamespaceValues(namespace, operationOperation, operationValues, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List defined meta namespaces\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public listNamespaces(options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).listNamespaces(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Generic request to either list (using Locators) or search (using Query) for nodes\n     * @param {RestLookupRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).lookup(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List all known versions of a node\n     * @param {string} uuid The node Uuid\n     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).nodeVersions(uuid, query, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)\n     * @param {string} uuid \n     * @param {RestNodeUpdates} nodeUpdates \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).patchNode(uuid, nodeUpdates, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.\n     * @param {PerformActionNameEnum} name \n     * @param {RestActionParameters} parameters \n     * @param {string} [jobUuid] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).performAction(name, parameters, jobUuid, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Promotes a version by ID to be the publicly available content of the node - files only\n     * @param {string} uuid \n     * @param {string} versionId \n     * @param {RestPromoteParameters} parameters \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).promoteVersion(uuid, versionId, parameters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Unset draft status of a resource, typically to publish a folder in draft mode\n     * @param {string} uuid \n     * @param {RestPublishNodeParameters} parameters \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).publishNode(uuid, parameters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Search a list of meta by node Id or by User id and by namespace\n     * @param {IdmSearchUserMetaRequest} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).searchMeta(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List available templates for hydrating empty files\n     * @param {string} [templateType] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public templates(templateType?: string, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).templates(templateType, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Add/delete a values for a given namespace\n     * @param {string} namespace List persisted values for this namespace\n     * @param {RestNamespaceValuesOperation} operation \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).updateNamespaceValues(namespace, operation, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update public link settings\n     * @param {string} linkUuid \n     * @param {RestPublicLinkRequest} publicLinkRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).updatePublicLink(linkUuid, publicLinkRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list\n     * @param {boolean} [all] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NodeServiceApi\n     */\n    public userBookmarks(all?: boolean, options?: RawAxiosRequestConfig) {\n        return NodeServiceApiFp(this.configuration).userBookmarks(all, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const BackgroundActionInfoNameEnum = {\n    Delete: 'delete',\n    Restore: 'restore',\n    Copy: 'copy',\n    Move: 'move',\n    Extract: 'extract',\n    Compress: 'compress'\n} as const;\nexport type BackgroundActionInfoNameEnum = typeof BackgroundActionInfoNameEnum[keyof typeof BackgroundActionInfoNameEnum];\n/**\n * @export\n */\nexport const ControlBackgroundActionNameEnum = {\n    Delete: 'delete',\n    Restore: 'restore',\n    Copy: 'copy',\n    Move: 'move',\n    Extract: 'extract',\n    Compress: 'compress'\n} as const;\nexport type ControlBackgroundActionNameEnum = typeof ControlBackgroundActionNameEnum[keyof typeof ControlBackgroundActionNameEnum];\n/**\n * @export\n */\nexport const ListNamespaceValuesOperationOperationEnum = {\n    Put: 'PUT',\n    Delete: 'DELETE'\n} as const;\nexport type ListNamespaceValuesOperationOperationEnum = typeof ListNamespaceValuesOperationOperationEnum[keyof typeof ListNamespaceValuesOperationOperationEnum];\n/**\n * @export\n */\nexport const PerformActionNameEnum = {\n    Delete: 'delete',\n    Restore: 'restore',\n    Copy: 'copy',\n    Move: 'move',\n    Extract: 'extract',\n    Compress: 'compress'\n} as const;\nexport type PerformActionNameEnum = typeof PerformActionNameEnum[keyof typeof PerformActionNameEnum];\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: RawAxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath ?? basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n\ninterface ServerMap {\n    [key: string]: {\n        url: string,\n        description: string,\n    }[];\n}\n\n/**\n *\n * @export\n */\nexport const operationServerMap: ServerMap = {\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    serverIndex?: number;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * override server index\n     *\n     * @type {number}\n     * @memberof Configuration\n     */\n    serverIndex?: number;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.serverIndex = param.serverIndex;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ActivityObjectType = {\n    BaseObject: 'BaseObject',\n    Activity: 'Activity',\n    Link: 'Link',\n    Mention: 'Mention',\n    Collection: 'Collection',\n    OrderedCollection: 'OrderedCollection',\n    CollectionPage: 'CollectionPage',\n    OrderedCollectionPage: 'OrderedCollectionPage',\n    Application: 'Application',\n    Group: 'Group',\n    Organization: 'Organization',\n    Person: 'Person',\n    Service: 'Service',\n    Article: 'Article',\n    Audio: 'Audio',\n    Document: 'Document',\n    Event: 'Event',\n    Image: 'Image',\n    Note: 'Note',\n    Page: 'Page',\n    Place: 'Place',\n    Profile: 'Profile',\n    Relationship: 'Relationship',\n    Tombstone: 'Tombstone',\n    Video: 'Video',\n    Accept: 'Accept',\n    Add: 'Add',\n    Announce: 'Announce',\n    Arrive: 'Arrive',\n    Block: 'Block',\n    Create: 'Create',\n    Delete: 'Delete',\n    Dislike: 'Dislike',\n    Flag: 'Flag',\n    Follow: 'Follow',\n    Ignore: 'Ignore',\n    Invite: 'Invite',\n    Join: 'Join',\n    Leave: 'Leave',\n    Like: 'Like',\n    Listen: 'Listen',\n    Move: 'Move',\n    Offer: 'Offer',\n    Question: 'Question',\n    Reject: 'Reject',\n    Read: 'Read',\n    Remove: 'Remove',\n    TentativeReject: 'TentativeReject',\n    TentativeAccept: 'TentativeAccept',\n    Travel: 'Travel',\n    Undo: 'Undo',\n    Update: 'Update',\n    UpdateComment: 'UpdateComment',\n    UpdateMeta: 'UpdateMeta',\n    View: 'View',\n    Workspace: 'Workspace',\n    Digest: 'Digest',\n    Folder: 'Folder',\n    Cell: 'Cell',\n    Share: 'Share'\n} as const;\n\nexport type ActivityObjectType = typeof ActivityObjectType[keyof typeof ActivityObjectType];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ActivityOwnerType = {\n    Node: 'NODE',\n    User: 'USER'\n} as const;\n\nexport type ActivityOwnerType = typeof ActivityOwnerType[keyof typeof ActivityOwnerType];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const IdmWorkspaceScope = {\n    Any: 'ANY',\n    Admin: 'ADMIN',\n    Room: 'ROOM',\n    Link: 'LINK'\n} as const;\n\nexport type IdmWorkspaceScope = typeof IdmWorkspaceScope[keyof typeof IdmWorkspaceScope];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const JobsCommand = {\n    None: 'None',\n    Pause: 'Pause',\n    Resume: 'Resume',\n    Stop: 'Stop',\n    Delete: 'Delete',\n    RunOnce: 'RunOnce',\n    Inactive: 'Inactive',\n    Active: 'Active'\n} as const;\n\nexport type JobsCommand = typeof JobsCommand[keyof typeof JobsCommand];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const JobsTaskStatus = {\n    Unknown: 'Unknown',\n    Idle: 'Idle',\n    Running: 'Running',\n    Finished: 'Finished',\n    Interrupted: 'Interrupted',\n    Paused: 'Paused',\n    Any: 'Any',\n    Error: 'Error',\n    Queued: 'Queued'\n} as const;\n\nexport type JobsTaskStatus = typeof JobsTaskStatus[keyof typeof JobsTaskStatus];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const MetaUpdateOp = {\n    Put: 'PUT',\n    Delete: 'DELETE'\n} as const;\n\nexport type MetaUpdateOp = typeof MetaUpdateOp[keyof typeof MetaUpdateOp];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestActionStatus = {\n    Performed: 'Performed',\n    Background: 'Background'\n} as const;\n\nexport type RestActionStatus = typeof RestActionStatus[keyof typeof RestActionStatus];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestFlag = {\n    WithMetaDefaults: 'WithMetaDefaults',\n    WithMetaCoreOnly: 'WithMetaCoreOnly',\n    WithMetaNone: 'WithMetaNone',\n    WithVersionsAll: 'WithVersionsAll',\n    WithVersionsDraft: 'WithVersionsDraft',\n    WithVersionsPublished: 'WithVersionsPublished',\n    WithPreSignedUrls: 'WithPreSignedURLs'\n} as const;\n\nexport type RestFlag = typeof RestFlag[keyof typeof RestFlag];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestMode = {\n    Default: 'Default',\n    NodeReadOnly: 'NodeReadOnly',\n    NodeWriteOnly: 'NodeWriteOnly',\n    LevelReadOnly: 'LevelReadOnly'\n} as const;\n\nexport type RestMode = typeof RestMode[keyof typeof RestMode];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestNsOp = {\n    Put: 'PUT',\n    Delete: 'DELETE'\n} as const;\n\nexport type RestNsOp = typeof RestNsOp[keyof typeof RestNsOp];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestShareLinkAccessType = {\n    NoAccess: 'NoAccess',\n    Preview: 'Preview',\n    Download: 'Download',\n    Upload: 'Upload'\n} as const;\n\nexport type RestShareLinkAccessType = typeof RestShareLinkAccessType[keyof typeof RestShareLinkAccessType];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestUserActionType = {\n    Delete: 'delete',\n    Restore: 'restore',\n    Copy: 'copy',\n    Move: 'move',\n    Extract: 'extract',\n    Compress: 'compress'\n} as const;\n\nexport type RestUserActionType = typeof RestUserActionType[keyof typeof RestUserActionType];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const RestVersionsTypes = {\n    VersionsAll: 'VersionsAll',\n    VersionsDraft: 'VersionsDraft',\n    VersionsPublished: 'VersionsPublished'\n} as const;\n\nexport type RestVersionsTypes = typeof RestVersionsTypes[keyof typeof RestVersionsTypes];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ServiceResourcePolicyAction = {\n    Any: 'ANY',\n    Owner: 'OWNER',\n    Read: 'READ',\n    Write: 'WRITE',\n    EditRules: 'EDIT_RULES'\n} as const;\n\nexport type ServiceResourcePolicyAction = typeof ServiceResourcePolicyAction[keyof typeof ServiceResourcePolicyAction];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const ServiceResourcePolicyPolicyEffect = {\n    Deny: 'deny',\n    Allow: 'allow'\n} as const;\n\nexport type ServiceResourcePolicyPolicyEffect = typeof ServiceResourcePolicyPolicyEffect[keyof typeof ServiceResourcePolicyPolicyEffect];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const TreeNodeChangeEventEventType = {\n    Create: 'CREATE',\n    Read: 'READ',\n    UpdatePath: 'UPDATE_PATH',\n    UpdateContent: 'UPDATE_CONTENT',\n    UpdateMeta: 'UPDATE_META',\n    UpdateUserMeta: 'UPDATE_USER_META',\n    Delete: 'DELETE'\n} as const;\n\nexport type TreeNodeChangeEventEventType = typeof TreeNodeChangeEventEventType[keyof typeof TreeNodeChangeEventEventType];\n\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Pydio Cells Rest API\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const TreeNodeType = {\n    Unknown: 'UNKNOWN',\n    Leaf: 'LEAF',\n    Collection: 'COLLECTION'\n} as const;\n\nexport type TreeNodeType = typeof TreeNodeType[keyof typeof TreeNodeType];\n\n\n\n"],"mappings":"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","names":["import_axios","globalAxios","globalAxios","BASE_PATH","globalAxios"]}