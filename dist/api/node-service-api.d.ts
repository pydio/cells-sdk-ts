/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { IdmSearchUserMetaRequest } from '../models';
import type { JobsCtrlCommand } from '../models';
import type { RestActionParameters } from '../models';
import type { RestBackgroundAction } from '../models';
import type { RestBatchUpdateMetaList } from '../models';
import type { RestCreateCheckRequest } from '../models';
import type { RestCreateCheckResponse } from '../models';
import type { RestCreateRequest } from '../models';
import type { RestDeleteVersionResponse } from '../models';
import type { RestListTemplatesResponse } from '../models';
import type { RestLookupRequest } from '../models';
import type { RestNamespaceValuesOperation } from '../models';
import type { RestNamespaceValuesResponse } from '../models';
import type { RestNode } from '../models';
import type { RestNodeCollection } from '../models';
import type { RestNodeUpdates } from '../models';
import type { RestNodeVersionsFilter } from '../models';
import type { RestPerformActionResponse } from '../models';
import type { RestPromoteParameters } from '../models';
import type { RestPromoteVersionResponse } from '../models';
import type { RestPublicLinkDeleteSuccess } from '../models';
import type { RestPublicLinkRequest } from '../models';
import type { RestPublishNodeParameters } from '../models';
import type { RestPublishNodeResponse } from '../models';
import type { RestSelection } from '../models';
import type { RestShareLink } from '../models';
import type { RestUserMetaList } from '../models';
import type { RestUserMetaNamespaceCollection } from '../models';
import type { RestVersionCollection } from '../models';
/**
 * NodeServiceApi - axios parameter creator
 * @export
 */
export declare const NodeServiceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve information about an action running in background
     * @param {BackgroundActionInfoNameEnum} name
     * @param {string} jobUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backgroundActionInfo: (name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     * @param {RestBatchUpdateMetaList} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpdateMeta: (body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Send control commands to a background job
     * @param {ControlBackgroundActionNameEnum} name
     * @param {string} jobUuid
     * @param {JobsCtrlCommand} command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    controlBackgroundAction: (name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders
     * @param {RestCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: (body: RestCreateRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Apply some pre-validation checks on node name before sending an upload
     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheck: (body: RestCreateCheckRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a public link on a given node
     * @param {string} uuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPublicLink: (uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create and persist a temporary selection of nodes, that can be used by other actions
     * @param {RestSelection} body Request to create a selection from a list of nodes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelection: (body: RestSelection, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove a public link
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePublicLink: (linkUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a version by its ID
     * @param {string} uuid
     * @param {string} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersion: (uuid: string, versionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Load a node by its Uuid
     * @param {string} uuid
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByUuid: (uuid: string, path?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Load public link information by Uuid
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicLink: (linkUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation
     * @param {Array<string>} operationValues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNamespaceValues: (namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List defined meta namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNamespaces: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Generic request to either list (using Locators) or search (using Query) for nodes
     * @param {RestLookupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookup: (body: RestLookupRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all known versions of a node
     * @param {string} uuid The node Uuid
     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nodeVersions: (uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     * @param {string} uuid
     * @param {RestNodeUpdates} nodeUpdates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchNode: (uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.
     * @param {PerformActionNameEnum} name
     * @param {RestActionParameters} parameters
     * @param {string} [jobUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performAction: (name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Promotes a version by ID to be the publicly available content of the node - files only
     * @param {string} uuid
     * @param {string} versionId
     * @param {RestPromoteParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promoteVersion: (uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unset draft status of a resource, typically to publish a folder in draft mode
     * @param {string} uuid
     * @param {RestPublishNodeParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishNode: (uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search a list of meta by node Id or by User id and by namespace
     * @param {IdmSearchUserMetaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMeta: (body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List available templates for hydrating empty files
     * @param {string} [templateType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templates: (templateType?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add/delete a values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {RestNamespaceValuesOperation} operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNamespaceValues: (namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update public link settings
     * @param {string} linkUuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicLink: (linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {boolean} [all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBookmarks: (all?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NodeServiceApi - functional programming interface
 * @export
 */
export declare const NodeServiceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve information about an action running in background
     * @param {BackgroundActionInfoNameEnum} name
     * @param {string} jobUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestBackgroundAction>>;
    /**
     *
     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     * @param {RestBatchUpdateMetaList} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestBatchUpdateMetaList>>;
    /**
     *
     * @summary Send control commands to a background job
     * @param {ControlBackgroundActionNameEnum} name
     * @param {string} jobUuid
     * @param {JobsCtrlCommand} command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestBackgroundAction>>;
    /**
     *
     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders
     * @param {RestCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(body: RestCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNodeCollection>>;
    /**
     *
     * @summary Apply some pre-validation checks on node name before sending an upload
     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestCreateCheckResponse>>;
    /**
     *
     * @summary Create a public link on a given node
     * @param {string} uuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestShareLink>>;
    /**
     *
     * @summary Create and persist a temporary selection of nodes, that can be used by other actions
     * @param {RestSelection} body Request to create a selection from a list of nodes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelection(body: RestSelection, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestSelection>>;
    /**
     *
     * @summary Remove a public link
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPublicLinkDeleteSuccess>>;
    /**
     *
     * @summary Delete a version by its ID
     * @param {string} uuid
     * @param {string} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestDeleteVersionResponse>>;
    /**
     *
     * @summary Load a node by its Uuid
     * @param {string} uuid
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNode>>;
    /**
     *
     * @summary Load public link information by Uuid
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestShareLink>>;
    /**
     *
     * @summary List values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation
     * @param {Array<string>} operationValues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNamespaceValuesResponse>>;
    /**
     *
     * @summary List defined meta namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNamespaces(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestUserMetaNamespaceCollection>>;
    /**
     *
     * @summary Generic request to either list (using Locators) or search (using Query) for nodes
     * @param {RestLookupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNodeCollection>>;
    /**
     *
     * @summary List all known versions of a node
     * @param {string} uuid The node Uuid
     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestVersionCollection>>;
    /**
     *
     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     * @param {string} uuid
     * @param {RestNodeUpdates} nodeUpdates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNode>>;
    /**
     *
     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.
     * @param {PerformActionNameEnum} name
     * @param {RestActionParameters} parameters
     * @param {string} [jobUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPerformActionResponse>>;
    /**
     *
     * @summary Promotes a version by ID to be the publicly available content of the node - files only
     * @param {string} uuid
     * @param {string} versionId
     * @param {RestPromoteParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPromoteVersionResponse>>;
    /**
     *
     * @summary Unset draft status of a resource, typically to publish a folder in draft mode
     * @param {string} uuid
     * @param {RestPublishNodeParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestPublishNodeResponse>>;
    /**
     *
     * @summary Search a list of meta by node Id or by User id and by namespace
     * @param {IdmSearchUserMetaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestUserMetaList>>;
    /**
     *
     * @summary List available templates for hydrating empty files
     * @param {string} [templateType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templates(templateType?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestListTemplatesResponse>>;
    /**
     *
     * @summary Add/delete a values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {RestNamespaceValuesOperation} operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNamespaceValuesResponse>>;
    /**
     *
     * @summary Update public link settings
     * @param {string} linkUuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestShareLink>>;
    /**
     *
     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {boolean} [all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestNodeCollection>>;
};
/**
 * NodeServiceApi - factory interface
 * @export
 */
export declare const NodeServiceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve information about an action running in background
     * @param {BackgroundActionInfoNameEnum} name
     * @param {string} jobUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction>;
    /**
     *
     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     * @param {RestBatchUpdateMetaList} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): AxiosPromise<RestBatchUpdateMetaList>;
    /**
     *
     * @summary Send control commands to a background job
     * @param {ControlBackgroundActionNameEnum} name
     * @param {string} jobUuid
     * @param {JobsCtrlCommand} command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction>;
    /**
     *
     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders
     * @param {RestCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(body: RestCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;
    /**
     *
     * @summary Apply some pre-validation checks on node name before sending an upload
     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestCreateCheckResponse>;
    /**
     *
     * @summary Create a public link on a given node
     * @param {string} uuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;
    /**
     *
     * @summary Create and persist a temporary selection of nodes, that can be used by other actions
     * @param {RestSelection} body Request to create a selection from a list of nodes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSelection(body: RestSelection, options?: RawAxiosRequestConfig): AxiosPromise<RestSelection>;
    /**
     *
     * @summary Remove a public link
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPublicLinkDeleteSuccess>;
    /**
     *
     * @summary Delete a version by its ID
     * @param {string} uuid
     * @param {string} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): AxiosPromise<RestDeleteVersionResponse>;
    /**
     *
     * @summary Load a node by its Uuid
     * @param {string} uuid
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestNode>;
    /**
     *
     * @summary Load public link information by Uuid
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;
    /**
     *
     * @summary List values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation
     * @param {Array<string>} operationValues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse>;
    /**
     *
     * @summary List defined meta namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listNamespaces(options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaNamespaceCollection>;
    /**
     *
     * @summary Generic request to either list (using Locators) or search (using Query) for nodes
     * @param {RestLookupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;
    /**
     *
     * @summary List all known versions of a node
     * @param {string} uuid The node Uuid
     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): AxiosPromise<RestVersionCollection>;
    /**
     *
     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     * @param {string} uuid
     * @param {RestNodeUpdates} nodeUpdates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): AxiosPromise<RestNode>;
    /**
     *
     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.
     * @param {PerformActionNameEnum} name
     * @param {RestActionParameters} parameters
     * @param {string} [jobUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPerformActionResponse>;
    /**
     *
     * @summary Promotes a version by ID to be the publicly available content of the node - files only
     * @param {string} uuid
     * @param {string} versionId
     * @param {RestPromoteParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPromoteVersionResponse>;
    /**
     *
     * @summary Unset draft status of a resource, typically to publish a folder in draft mode
     * @param {string} uuid
     * @param {RestPublishNodeParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPublishNodeResponse>;
    /**
     *
     * @summary Search a list of meta by node Id or by User id and by namespace
     * @param {IdmSearchUserMetaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaList>;
    /**
     *
     * @summary List available templates for hydrating empty files
     * @param {string} [templateType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    templates(templateType?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestListTemplatesResponse>;
    /**
     *
     * @summary Add/delete a values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {RestNamespaceValuesOperation} operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse>;
    /**
     *
     * @summary Update public link settings
     * @param {string} linkUuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;
    /**
     *
     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {boolean} [all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;
};
/**
 * NodeServiceApi - interface
 * @export
 * @interface NodeServiceApi
 */
export interface NodeServiceApiInterface {
    /**
     *
     * @summary Retrieve information about an action running in background
     * @param {BackgroundActionInfoNameEnum} name
     * @param {string} jobUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction>;
    /**
     *
     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     * @param {RestBatchUpdateMetaList} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): AxiosPromise<RestBatchUpdateMetaList>;
    /**
     *
     * @summary Send control commands to a background job
     * @param {ControlBackgroundActionNameEnum} name
     * @param {string} jobUuid
     * @param {JobsCtrlCommand} command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): AxiosPromise<RestBackgroundAction>;
    /**
     *
     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders
     * @param {RestCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    create(body: RestCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;
    /**
     *
     * @summary Apply some pre-validation checks on node name before sending an upload
     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestCreateCheckResponse>;
    /**
     *
     * @summary Create a public link on a given node
     * @param {string} uuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;
    /**
     *
     * @summary Create and persist a temporary selection of nodes, that can be used by other actions
     * @param {RestSelection} body Request to create a selection from a list of nodes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    createSelection(body: RestSelection, options?: RawAxiosRequestConfig): AxiosPromise<RestSelection>;
    /**
     *
     * @summary Remove a public link
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPublicLinkDeleteSuccess>;
    /**
     *
     * @summary Delete a version by its ID
     * @param {string} uuid
     * @param {string} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): AxiosPromise<RestDeleteVersionResponse>;
    /**
     *
     * @summary Load a node by its Uuid
     * @param {string} uuid
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestNode>;
    /**
     *
     * @summary Load public link information by Uuid
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;
    /**
     *
     * @summary List values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation
     * @param {Array<string>} operationValues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse>;
    /**
     *
     * @summary List defined meta namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    listNamespaces(options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaNamespaceCollection>;
    /**
     *
     * @summary Generic request to either list (using Locators) or search (using Query) for nodes
     * @param {RestLookupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;
    /**
     *
     * @summary List all known versions of a node
     * @param {string} uuid The node Uuid
     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): AxiosPromise<RestVersionCollection>;
    /**
     *
     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     * @param {string} uuid
     * @param {RestNodeUpdates} nodeUpdates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): AxiosPromise<RestNode>;
    /**
     *
     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.
     * @param {PerformActionNameEnum} name
     * @param {RestActionParameters} parameters
     * @param {string} [jobUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestPerformActionResponse>;
    /**
     *
     * @summary Promotes a version by ID to be the publicly available content of the node - files only
     * @param {string} uuid
     * @param {string} versionId
     * @param {RestPromoteParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPromoteVersionResponse>;
    /**
     *
     * @summary Unset draft status of a resource, typically to publish a folder in draft mode
     * @param {string} uuid
     * @param {RestPublishNodeParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): AxiosPromise<RestPublishNodeResponse>;
    /**
     *
     * @summary Search a list of meta by node Id or by User id and by namespace
     * @param {IdmSearchUserMetaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestUserMetaList>;
    /**
     *
     * @summary List available templates for hydrating empty files
     * @param {string} [templateType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    templates(templateType?: string, options?: RawAxiosRequestConfig): AxiosPromise<RestListTemplatesResponse>;
    /**
     *
     * @summary Add/delete a values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {RestNamespaceValuesOperation} operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): AxiosPromise<RestNamespaceValuesResponse>;
    /**
     *
     * @summary Update public link settings
     * @param {string} linkUuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestShareLink>;
    /**
     *
     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {boolean} [all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApiInterface
     */
    userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<RestNodeCollection>;
}
/**
 * NodeServiceApi - object-oriented interface
 * @export
 * @class NodeServiceApi
 * @extends {BaseAPI}
 */
export declare class NodeServiceApi extends BaseAPI implements NodeServiceApiInterface {
    /**
     *
     * @summary Retrieve information about an action running in background
     * @param {BackgroundActionInfoNameEnum} name
     * @param {string} jobUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    backgroundActionInfo(name: BackgroundActionInfoNameEnum, jobUuid: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestBackgroundAction, any>>;
    /**
     *
     * @summary Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     * @param {RestBatchUpdateMetaList} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    batchUpdateMeta(body: RestBatchUpdateMetaList, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestBatchUpdateMetaList, any>>;
    /**
     *
     * @summary Send control commands to a background job
     * @param {ControlBackgroundActionNameEnum} name
     * @param {string} jobUuid
     * @param {JobsCtrlCommand} command
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    controlBackgroundAction(name: ControlBackgroundActionNameEnum, jobUuid: string, command: JobsCtrlCommand, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestBackgroundAction, any>>;
    /**
     *
     * @summary Create one or many files (empty or hydrated from a TemplateUuid) or folders
     * @param {RestCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    create(body: RestCreateRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNodeCollection, any>>;
    /**
     *
     * @summary Apply some pre-validation checks on node name before sending an upload
     * @param {RestCreateCheckRequest} body Request for pre-checking nodes before uploading or creating them.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    createCheck(body: RestCreateCheckRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestCreateCheckResponse, any>>;
    /**
     *
     * @summary Create a public link on a given node
     * @param {string} uuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    createPublicLink(uuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestShareLink, any>>;
    /**
     *
     * @summary Create and persist a temporary selection of nodes, that can be used by other actions
     * @param {RestSelection} body Request to create a selection from a list of nodes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    createSelection(body: RestSelection, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestSelection, any>>;
    /**
     *
     * @summary Remove a public link
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    deletePublicLink(linkUuid: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestPublicLinkDeleteSuccess, any>>;
    /**
     *
     * @summary Delete a version by its ID
     * @param {string} uuid
     * @param {string} versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    deleteVersion(uuid: string, versionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestDeleteVersionResponse, any>>;
    /**
     *
     * @summary Load a node by its Uuid
     * @param {string} uuid
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    getByUuid(uuid: string, path?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNode, any>>;
    /**
     *
     * @summary Load public link information by Uuid
     * @param {string} linkUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    getPublicLink(linkUuid: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestShareLink, any>>;
    /**
     *
     * @summary List values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {ListNamespaceValuesOperationOperationEnum} operationOperation
     * @param {Array<string>} operationValues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    listNamespaceValues(namespace: string, operationOperation: ListNamespaceValuesOperationOperationEnum, operationValues: Array<string>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNamespaceValuesResponse, any>>;
    /**
     *
     * @summary List defined meta namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    listNamespaces(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestUserMetaNamespaceCollection, any>>;
    /**
     *
     * @summary Generic request to either list (using Locators) or search (using Query) for nodes
     * @param {RestLookupRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    lookup(body: RestLookupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNodeCollection, any>>;
    /**
     *
     * @summary List all known versions of a node
     * @param {string} uuid The node Uuid
     * @param {RestNodeVersionsFilter} query Additional parameters for filtering/sorting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    nodeVersions(uuid: string, query: RestNodeVersionsFilter, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestVersionCollection, any>>;
    /**
     *
     * @summary Update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     * @param {string} uuid
     * @param {RestNodeUpdates} nodeUpdates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    patchNode(uuid: string, nodeUpdates: RestNodeUpdates, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNode, any>>;
    /**
     *
     * @summary Trigger an action on the tree. Returns a JobInfo describing a background task.
     * @param {PerformActionNameEnum} name
     * @param {RestActionParameters} parameters
     * @param {string} [jobUuid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    performAction(name: PerformActionNameEnum, parameters: RestActionParameters, jobUuid?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestPerformActionResponse, any>>;
    /**
     *
     * @summary Promotes a version by ID to be the publicly available content of the node - files only
     * @param {string} uuid
     * @param {string} versionId
     * @param {RestPromoteParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    promoteVersion(uuid: string, versionId: string, parameters: RestPromoteParameters, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestPromoteVersionResponse, any>>;
    /**
     *
     * @summary Unset draft status of a resource, typically to publish a folder in draft mode
     * @param {string} uuid
     * @param {RestPublishNodeParameters} parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    publishNode(uuid: string, parameters: RestPublishNodeParameters, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestPublishNodeResponse, any>>;
    /**
     *
     * @summary Search a list of meta by node Id or by User id and by namespace
     * @param {IdmSearchUserMetaRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    searchMeta(body: IdmSearchUserMetaRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestUserMetaList, any>>;
    /**
     *
     * @summary List available templates for hydrating empty files
     * @param {string} [templateType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    templates(templateType?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestListTemplatesResponse, any>>;
    /**
     *
     * @summary Add/delete a values for a given namespace
     * @param {string} namespace List persisted values for this namespace
     * @param {RestNamespaceValuesOperation} operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    updateNamespaceValues(namespace: string, operation: RestNamespaceValuesOperation, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNamespaceValuesResponse, any>>;
    /**
     *
     * @summary Update public link settings
     * @param {string} linkUuid
     * @param {RestPublicLinkRequest} publicLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    updatePublicLink(linkUuid: string, publicLinkRequest: RestPublicLinkRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestShareLink, any>>;
    /**
     *
     * @summary Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * @param {boolean} [all]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeServiceApi
     */
    userBookmarks(all?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RestNodeCollection, any>>;
}
/**
 * @export
 */
export declare const BackgroundActionInfoNameEnum: {
    readonly Delete: "delete";
    readonly Restore: "restore";
    readonly Copy: "copy";
    readonly Move: "move";
    readonly Extract: "extract";
    readonly Compress: "compress";
};
export type BackgroundActionInfoNameEnum = typeof BackgroundActionInfoNameEnum[keyof typeof BackgroundActionInfoNameEnum];
/**
 * @export
 */
export declare const ControlBackgroundActionNameEnum: {
    readonly Delete: "delete";
    readonly Restore: "restore";
    readonly Copy: "copy";
    readonly Move: "move";
    readonly Extract: "extract";
    readonly Compress: "compress";
};
export type ControlBackgroundActionNameEnum = typeof ControlBackgroundActionNameEnum[keyof typeof ControlBackgroundActionNameEnum];
/**
 * @export
 */
export declare const ListNamespaceValuesOperationOperationEnum: {
    readonly Put: "PUT";
    readonly Delete: "DELETE";
};
export type ListNamespaceValuesOperationOperationEnum = typeof ListNamespaceValuesOperationOperationEnum[keyof typeof ListNamespaceValuesOperationOperationEnum];
/**
 * @export
 */
export declare const PerformActionNameEnum: {
    readonly Delete: "delete";
    readonly Restore: "restore";
    readonly Copy: "copy";
    readonly Move: "move";
    readonly Extract: "extract";
    readonly Compress: "compress";
};
export type PerformActionNameEnum = typeof PerformActionNameEnum[keyof typeof PerformActionNameEnum];
