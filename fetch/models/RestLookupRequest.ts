/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RestNodeLocators } from './RestNodeLocators';
import {
    RestNodeLocatorsFromJSON,
    RestNodeLocatorsFromJSONTyped,
    RestNodeLocatorsToJSON,
    RestNodeLocatorsToJSONTyped,
} from './RestNodeLocators';
import type { TreeQuery } from './TreeQuery';
import {
    TreeQueryFromJSON,
    TreeQueryFromJSONTyped,
    TreeQueryToJSON,
    TreeQueryToJSONTyped,
} from './TreeQuery';

/**
 * 
 * @export
 * @interface RestLookupRequest
 */
export interface RestLookupRequest {
    /**
     * 
     * @type {string}
     * @memberof RestLookupRequest
     */
    limit?: string;
    /**
     * 
     * @type {RestNodeLocators}
     * @memberof RestLookupRequest
     */
    locators?: RestNodeLocators;
    /**
     * 
     * @type {string}
     * @memberof RestLookupRequest
     */
    offset?: string;
    /**
     * 
     * @type {TreeQuery}
     * @memberof RestLookupRequest
     */
    query?: TreeQuery;
    /**
     * 
     * @type {boolean}
     * @memberof RestLookupRequest
     */
    sortDirDesc?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RestLookupRequest
     */
    sortField?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof RestLookupRequest
     */
    statFlags?: Array<number>;
}

/**
 * Check if a given object implements the RestLookupRequest interface.
 */
export function instanceOfRestLookupRequest(value: object): value is RestLookupRequest {
    return true;
}

export function RestLookupRequestFromJSON(json: any): RestLookupRequest {
    return RestLookupRequestFromJSONTyped(json, false);
}

export function RestLookupRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestLookupRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'limit': json['Limit'] == null ? undefined : json['Limit'],
        'locators': json['Locators'] == null ? undefined : RestNodeLocatorsFromJSON(json['Locators']),
        'offset': json['Offset'] == null ? undefined : json['Offset'],
        'query': json['Query'] == null ? undefined : TreeQueryFromJSON(json['Query']),
        'sortDirDesc': json['SortDirDesc'] == null ? undefined : json['SortDirDesc'],
        'sortField': json['SortField'] == null ? undefined : json['SortField'],
        'statFlags': json['StatFlags'] == null ? undefined : json['StatFlags'],
    };
}

export function RestLookupRequestToJSON(json: any): RestLookupRequest {
    return RestLookupRequestToJSONTyped(json, false);
}

export function RestLookupRequestToJSONTyped(value?: RestLookupRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Limit': value['limit'],
        'Locators': RestNodeLocatorsToJSON(value['locators']),
        'Offset': value['offset'],
        'Query': TreeQueryToJSON(value['query']),
        'SortDirDesc': value['sortDirDesc'],
        'SortField': value['sortField'],
        'StatFlags': value['statFlags'],
    };
}

