/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TreeNode } from './TreeNode';
import {
    TreeNodeFromJSON,
    TreeNodeFromJSONTyped,
    TreeNodeToJSON,
    TreeNodeToJSONTyped,
} from './TreeNode';
import type { TreeNodeChangeEventEventType } from './TreeNodeChangeEventEventType';
import {
    TreeNodeChangeEventEventTypeFromJSON,
    TreeNodeChangeEventEventTypeFromJSONTyped,
    TreeNodeChangeEventEventTypeToJSON,
    TreeNodeChangeEventEventTypeToJSONTyped,
} from './TreeNodeChangeEventEventType';

/**
 * 
 * @export
 * @interface TreeNodeChangeEvent
 */
export interface TreeNodeChangeEvent {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TreeNodeChangeEvent
     */
    metadata?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof TreeNodeChangeEvent
     */
    optimistic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TreeNodeChangeEvent
     */
    silent?: boolean;
    /**
     * 
     * @type {TreeNode}
     * @memberof TreeNodeChangeEvent
     */
    source?: TreeNode;
    /**
     * 
     * @type {TreeNode}
     * @memberof TreeNodeChangeEvent
     */
    target?: TreeNode;
    /**
     * 
     * @type {TreeNodeChangeEventEventType}
     * @memberof TreeNodeChangeEvent
     */
    type?: TreeNodeChangeEventEventType;
}



/**
 * Check if a given object implements the TreeNodeChangeEvent interface.
 */
export function instanceOfTreeNodeChangeEvent(value: object): value is TreeNodeChangeEvent {
    return true;
}

export function TreeNodeChangeEventFromJSON(json: any): TreeNodeChangeEvent {
    return TreeNodeChangeEventFromJSONTyped(json, false);
}

export function TreeNodeChangeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): TreeNodeChangeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'metadata': json['Metadata'] == null ? undefined : json['Metadata'],
        'optimistic': json['Optimistic'] == null ? undefined : json['Optimistic'],
        'silent': json['Silent'] == null ? undefined : json['Silent'],
        'source': json['Source'] == null ? undefined : TreeNodeFromJSON(json['Source']),
        'target': json['Target'] == null ? undefined : TreeNodeFromJSON(json['Target']),
        'type': json['Type'] == null ? undefined : TreeNodeChangeEventEventTypeFromJSON(json['Type']),
    };
}

export function TreeNodeChangeEventToJSON(json: any): TreeNodeChangeEvent {
    return TreeNodeChangeEventToJSONTyped(json, false);
}

export function TreeNodeChangeEventToJSONTyped(value?: TreeNodeChangeEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Metadata': value['metadata'],
        'Optimistic': value['optimistic'],
        'Silent': value['silent'],
        'Source': TreeNodeToJSON(value['source']),
        'Target': TreeNodeToJSON(value['target']),
        'Type': TreeNodeChangeEventEventTypeToJSON(value['type']),
    };
}

