/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServiceResourcePolicy } from './ServiceResourcePolicy';
import {
    ServiceResourcePolicyFromJSON,
    ServiceResourcePolicyFromJSONTyped,
    ServiceResourcePolicyToJSON,
    ServiceResourcePolicyToJSONTyped,
} from './ServiceResourcePolicy';

/**
 * 
 * @export
 * @interface IdmUserMetaNamespace
 */
export interface IdmUserMetaNamespace {
    /**
     * 
     * @type {boolean}
     * @memberof IdmUserMetaNamespace
     */
    indexable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdmUserMetaNamespace
     */
    jsonDefinition?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmUserMetaNamespace
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof IdmUserMetaNamespace
     */
    namespace?: string;
    /**
     * 
     * @type {number}
     * @memberof IdmUserMetaNamespace
     */
    order?: number;
    /**
     * 
     * @type {Array<ServiceResourcePolicy>}
     * @memberof IdmUserMetaNamespace
     */
    policies?: Array<ServiceResourcePolicy>;
    /**
     * 
     * @type {boolean}
     * @memberof IdmUserMetaNamespace
     */
    policiesContextEditable?: boolean;
}

/**
 * Check if a given object implements the IdmUserMetaNamespace interface.
 */
export function instanceOfIdmUserMetaNamespace(value: object): value is IdmUserMetaNamespace {
    return true;
}

export function IdmUserMetaNamespaceFromJSON(json: any): IdmUserMetaNamespace {
    return IdmUserMetaNamespaceFromJSONTyped(json, false);
}

export function IdmUserMetaNamespaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdmUserMetaNamespace {
    if (json == null) {
        return json;
    }
    return {
        
        'indexable': json['Indexable'] == null ? undefined : json['Indexable'],
        'jsonDefinition': json['JsonDefinition'] == null ? undefined : json['JsonDefinition'],
        'label': json['Label'] == null ? undefined : json['Label'],
        'namespace': json['Namespace'] == null ? undefined : json['Namespace'],
        'order': json['Order'] == null ? undefined : json['Order'],
        'policies': json['Policies'] == null ? undefined : ((json['Policies'] as Array<any>).map(ServiceResourcePolicyFromJSON)),
        'policiesContextEditable': json['PoliciesContextEditable'] == null ? undefined : json['PoliciesContextEditable'],
    };
}

export function IdmUserMetaNamespaceToJSON(json: any): IdmUserMetaNamespace {
    return IdmUserMetaNamespaceToJSONTyped(json, false);
}

export function IdmUserMetaNamespaceToJSONTyped(value?: IdmUserMetaNamespace | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Indexable': value['indexable'],
        'JsonDefinition': value['jsonDefinition'],
        'Label': value['label'],
        'Namespace': value['namespace'],
        'Order': value['order'],
        'Policies': value['policies'] == null ? undefined : ((value['policies'] as Array<any>).map(ServiceResourcePolicyToJSON)),
        'PoliciesContextEditable': value['policiesContextEditable'],
    };
}

