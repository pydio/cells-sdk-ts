/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RestNodeLocator } from './RestNodeLocator';
import {
    RestNodeLocatorFromJSON,
    RestNodeLocatorFromJSONTyped,
    RestNodeLocatorToJSON,
    RestNodeLocatorToJSONTyped,
} from './RestNodeLocator';
import type { TreeNodeType } from './TreeNodeType';
import {
    TreeNodeTypeFromJSON,
    TreeNodeTypeFromJSONTyped,
    TreeNodeTypeToJSON,
    TreeNodeTypeToJSONTyped,
} from './TreeNodeType';

/**
 * 
 * @export
 * @interface RestIncomingNode
 */
export interface RestIncomingNode {
    /**
     * 
     * @type {string}
     * @memberof RestIncomingNode
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof RestIncomingNode
     */
    knownSize?: string;
    /**
     * 
     * @type {RestNodeLocator}
     * @memberof RestIncomingNode
     */
    locator: RestNodeLocator;
    /**
     * 
     * @type {string}
     * @memberof RestIncomingNode
     */
    templateUuid?: string;
    /**
     * 
     * @type {TreeNodeType}
     * @memberof RestIncomingNode
     */
    type: TreeNodeType;
}



/**
 * Check if a given object implements the RestIncomingNode interface.
 */
export function instanceOfRestIncomingNode(value: object): value is RestIncomingNode {
    if (!('locator' in value) || value['locator'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function RestIncomingNodeFromJSON(json: any): RestIncomingNode {
    return RestIncomingNodeFromJSONTyped(json, false);
}

export function RestIncomingNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestIncomingNode {
    if (json == null) {
        return json;
    }
    return {
        
        'contentType': json['ContentType'] == null ? undefined : json['ContentType'],
        'knownSize': json['KnownSize'] == null ? undefined : json['KnownSize'],
        'locator': RestNodeLocatorFromJSON(json['Locator']),
        'templateUuid': json['TemplateUuid'] == null ? undefined : json['TemplateUuid'],
        'type': TreeNodeTypeFromJSON(json['Type']),
    };
}

export function RestIncomingNodeToJSON(json: any): RestIncomingNode {
    return RestIncomingNodeToJSONTyped(json, false);
}

export function RestIncomingNodeToJSONTyped(value?: RestIncomingNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ContentType': value['contentType'],
        'KnownSize': value['knownSize'],
        'Locator': RestNodeLocatorToJSON(value['locator']),
        'TemplateUuid': value['templateUuid'],
        'Type': TreeNodeTypeToJSON(value['type']),
    };
}

