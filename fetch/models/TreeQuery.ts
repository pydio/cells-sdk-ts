/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TreeNodeType } from './TreeNodeType';
import {
    TreeNodeTypeFromJSON,
    TreeNodeTypeFromJSONTyped,
    TreeNodeTypeToJSON,
    TreeNodeTypeToJSONTyped,
} from './TreeNodeType';
import type { TreeGeoQuery } from './TreeGeoQuery';
import {
    TreeGeoQueryFromJSON,
    TreeGeoQueryFromJSONTyped,
    TreeGeoQueryToJSON,
    TreeGeoQueryToJSONTyped,
} from './TreeGeoQuery';

/**
 * 
 * @export
 * @interface TreeQuery
 */
export interface TreeQuery {
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    durationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    eTag?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    extension?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    fileName?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    fileNameOrContent?: string;
    /**
     * Bleve-like search query to search for a specific metadata value.
     * When querying nodes, this will redirect this query to the Search Engine. When filtering an input, this will load an in-memory bleve engine to evaluate the node.
     * 
     * Bleve query string format is a space separated list of `[+-]key:value`, where node meta keys must be prepended with "Meta."
     * For Example, for tags: `+Meta.usermeta-tags:myvalue`
     * @type {string}
     * @memberof TreeQuery
     */
    freeString?: string;
    /**
     * 
     * @type {TreeGeoQuery}
     * @memberof TreeQuery
     */
    geoQuery?: TreeGeoQuery;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    maxDate?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    maxSize?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    minDate?: string;
    /**
     * 
     * @type {string}
     * @memberof TreeQuery
     */
    minSize?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TreeQuery
     */
    not?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TreeQuery
     */
    pathDepth?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TreeQuery
     */
    pathPrefix?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TreeQuery
     */
    paths?: Array<string>;
    /**
     * 
     * @type {TreeNodeType}
     * @memberof TreeQuery
     */
    type?: TreeNodeType;
    /**
     * 
     * @type {Array<string>}
     * @memberof TreeQuery
     */
    uUIDs?: Array<string>;
}



/**
 * Check if a given object implements the TreeQuery interface.
 */
export function instanceOfTreeQuery(value: object): value is TreeQuery {
    return true;
}

export function TreeQueryFromJSON(json: any): TreeQuery {
    return TreeQueryFromJSONTyped(json, false);
}

export function TreeQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): TreeQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['Content'] == null ? undefined : json['Content'],
        'durationDate': json['DurationDate'] == null ? undefined : json['DurationDate'],
        'eTag': json['ETag'] == null ? undefined : json['ETag'],
        'extension': json['Extension'] == null ? undefined : json['Extension'],
        'fileName': json['FileName'] == null ? undefined : json['FileName'],
        'fileNameOrContent': json['FileNameOrContent'] == null ? undefined : json['FileNameOrContent'],
        'freeString': json['FreeString'] == null ? undefined : json['FreeString'],
        'geoQuery': json['GeoQuery'] == null ? undefined : TreeGeoQueryFromJSON(json['GeoQuery']),
        'maxDate': json['MaxDate'] == null ? undefined : json['MaxDate'],
        'maxSize': json['MaxSize'] == null ? undefined : json['MaxSize'],
        'minDate': json['MinDate'] == null ? undefined : json['MinDate'],
        'minSize': json['MinSize'] == null ? undefined : json['MinSize'],
        'not': json['Not'] == null ? undefined : json['Not'],
        'pathDepth': json['PathDepth'] == null ? undefined : json['PathDepth'],
        'pathPrefix': json['PathPrefix'] == null ? undefined : json['PathPrefix'],
        'paths': json['Paths'] == null ? undefined : json['Paths'],
        'type': json['Type'] == null ? undefined : TreeNodeTypeFromJSON(json['Type']),
        'uUIDs': json['UUIDs'] == null ? undefined : json['UUIDs'],
    };
}

export function TreeQueryToJSON(json: any): TreeQuery {
    return TreeQueryToJSONTyped(json, false);
}

export function TreeQueryToJSONTyped(value?: TreeQuery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Content': value['content'],
        'DurationDate': value['durationDate'],
        'ETag': value['eTag'],
        'Extension': value['extension'],
        'FileName': value['fileName'],
        'FileNameOrContent': value['fileNameOrContent'],
        'FreeString': value['freeString'],
        'GeoQuery': TreeGeoQueryToJSON(value['geoQuery']),
        'MaxDate': value['maxDate'],
        'MaxSize': value['maxSize'],
        'MinDate': value['minDate'],
        'MinSize': value['minSize'],
        'Not': value['not'],
        'PathDepth': value['pathDepth'],
        'PathPrefix': value['pathPrefix'],
        'Paths': value['paths'],
        'Type': TreeNodeTypeToJSON(value['type']),
        'UUIDs': value['uUIDs'],
    };
}

