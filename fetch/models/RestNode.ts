/* tslint:disable */
/* eslint-disable */
/**
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RestJsonMeta } from './RestJsonMeta';
import {
    RestJsonMetaFromJSON,
    RestJsonMetaFromJSONTyped,
    RestJsonMetaToJSON,
    RestJsonMetaToJSONTyped,
} from './RestJsonMeta';
import type { RestImageMeta } from './RestImageMeta';
import {
    RestImageMetaFromJSON,
    RestImageMetaFromJSONTyped,
    RestImageMetaToJSON,
    RestImageMetaToJSONTyped,
} from './RestImageMeta';
import type { ActivitySubscription } from './ActivitySubscription';
import {
    ActivitySubscriptionFromJSON,
    ActivitySubscriptionFromJSONTyped,
    ActivitySubscriptionToJSON,
    ActivitySubscriptionToJSONTyped,
} from './ActivitySubscription';
import type { RestLockInfo } from './RestLockInfo';
import {
    RestLockInfoFromJSON,
    RestLockInfoFromJSONTyped,
    RestLockInfoToJSON,
    RestLockInfoToJSONTyped,
} from './RestLockInfo';
import type { RestDataSourceFeatures } from './RestDataSourceFeatures';
import {
    RestDataSourceFeaturesFromJSON,
    RestDataSourceFeaturesFromJSONTyped,
    RestDataSourceFeaturesToJSON,
    RestDataSourceFeaturesToJSONTyped,
} from './RestDataSourceFeatures';
import type { RestMode } from './RestMode';
import {
    RestModeFromJSON,
    RestModeFromJSONTyped,
    RestModeToJSON,
    RestModeToJSONTyped,
} from './RestMode';
import type { RestShareLink } from './RestShareLink';
import {
    RestShareLinkFromJSON,
    RestShareLinkFromJSONTyped,
    RestShareLinkToJSON,
    RestShareLinkToJSONTyped,
} from './RestShareLink';
import type { RestCountMeta } from './RestCountMeta';
import {
    RestCountMetaFromJSON,
    RestCountMetaFromJSONTyped,
    RestCountMetaToJSON,
    RestCountMetaToJSONTyped,
} from './RestCountMeta';
import type { RestUserMeta } from './RestUserMeta';
import {
    RestUserMetaFromJSON,
    RestUserMetaFromJSONTyped,
    RestUserMetaToJSON,
    RestUserMetaToJSONTyped,
} from './RestUserMeta';
import type { RestFilePreview } from './RestFilePreview';
import {
    RestFilePreviewFromJSON,
    RestFilePreviewFromJSONTyped,
    RestFilePreviewToJSON,
    RestFilePreviewToJSONTyped,
} from './RestFilePreview';
import type { TreeNodeType } from './TreeNodeType';
import {
    TreeNodeTypeFromJSON,
    TreeNodeTypeFromJSONTyped,
    TreeNodeTypeToJSON,
    TreeNodeTypeToJSONTyped,
} from './TreeNodeType';
import type { ActivityObject } from './ActivityObject';
import {
    ActivityObjectFromJSON,
    ActivityObjectFromJSONTyped,
    ActivityObjectToJSON,
    ActivityObjectToJSONTyped,
} from './ActivityObject';
import type { RestContextWorkspace } from './RestContextWorkspace';
import {
    RestContextWorkspaceFromJSON,
    RestContextWorkspaceFromJSONTyped,
    RestContextWorkspaceToJSON,
    RestContextWorkspaceToJSONTyped,
} from './RestContextWorkspace';
import type { RestRevisionMeta } from './RestRevisionMeta';
import {
    RestRevisionMetaFromJSON,
    RestRevisionMetaFromJSONTyped,
    RestRevisionMetaToJSON,
    RestRevisionMetaToJSONTyped,
} from './RestRevisionMeta';

/**
 * 
 * @export
 * @interface RestNode
 */
export interface RestNode {
    /**
     * 
     * @type {Array<ActivityObject>}
     * @memberof RestNode
     */
    activities?: Array<ActivityObject>;
    /**
     * 
     * @type {RestLockInfo}
     * @memberof RestNode
     */
    contentLock?: RestLockInfo;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    contentsHash?: string;
    /**
     * 
     * @type {RestContextWorkspace}
     * @memberof RestNode
     */
    contextWorkspace?: RestContextWorkspace;
    /**
     * 
     * @type {RestDataSourceFeatures}
     * @memberof RestNode
     */
    dataSourceFeatures?: RestDataSourceFeatures;
    /**
     * 
     * @type {Array<RestCountMeta>}
     * @memberof RestNode
     */
    folderMeta?: Array<RestCountMeta>;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    hashingMethod?: string;
    /**
     * 
     * @type {RestImageMeta}
     * @memberof RestNode
     */
    imageMeta?: RestImageMeta;
    /**
     * 
     * @type {boolean}
     * @memberof RestNode
     */
    isBookmarked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RestNode
     */
    isRecycleBin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RestNode
     */
    isRecycled?: boolean;
    /**
     * 
     * @type {Array<RestJsonMeta>}
     * @memberof RestNode
     */
    metadata?: Array<RestJsonMeta>;
    /**
     * 
     * @type {RestMode}
     * @memberof RestNode
     */
    mode?: RestMode;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    modified?: string;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    path?: string;
    /**
     * 
     * @type {Array<RestFilePreview>}
     * @memberof RestNode
     */
    previews?: Array<RestFilePreview>;
    /**
     * 
     * @type {RestRevisionMeta}
     * @memberof RestNode
     */
    revisionMeta?: RestRevisionMeta;
    /**
     * 
     * @type {Array<RestShareLink>}
     * @memberof RestNode
     */
    shares?: Array<RestShareLink>;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    size?: string;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    storageETag?: string;
    /**
     * 
     * @type {Array<ActivitySubscription>}
     * @memberof RestNode
     */
    subscriptions?: Array<ActivitySubscription>;
    /**
     * 
     * @type {TreeNodeType}
     * @memberof RestNode
     */
    type?: TreeNodeType;
    /**
     * 
     * @type {Array<RestUserMeta>}
     * @memberof RestNode
     */
    userMetadata?: Array<RestUserMeta>;
    /**
     * 
     * @type {string}
     * @memberof RestNode
     */
    uuid?: string;
}



/**
 * Check if a given object implements the RestNode interface.
 */
export function instanceOfRestNode(value: object): value is RestNode {
    return true;
}

export function RestNodeFromJSON(json: any): RestNode {
    return RestNodeFromJSONTyped(json, false);
}

export function RestNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestNode {
    if (json == null) {
        return json;
    }
    return {
        
        'activities': json['Activities'] == null ? undefined : ((json['Activities'] as Array<any>).map(ActivityObjectFromJSON)),
        'contentLock': json['ContentLock'] == null ? undefined : RestLockInfoFromJSON(json['ContentLock']),
        'contentType': json['ContentType'] == null ? undefined : json['ContentType'],
        'contentsHash': json['ContentsHash'] == null ? undefined : json['ContentsHash'],
        'contextWorkspace': json['ContextWorkspace'] == null ? undefined : RestContextWorkspaceFromJSON(json['ContextWorkspace']),
        'dataSourceFeatures': json['DataSourceFeatures'] == null ? undefined : RestDataSourceFeaturesFromJSON(json['DataSourceFeatures']),
        'folderMeta': json['FolderMeta'] == null ? undefined : ((json['FolderMeta'] as Array<any>).map(RestCountMetaFromJSON)),
        'hashingMethod': json['HashingMethod'] == null ? undefined : json['HashingMethod'],
        'imageMeta': json['ImageMeta'] == null ? undefined : RestImageMetaFromJSON(json['ImageMeta']),
        'isBookmarked': json['IsBookmarked'] == null ? undefined : json['IsBookmarked'],
        'isRecycleBin': json['IsRecycleBin'] == null ? undefined : json['IsRecycleBin'],
        'isRecycled': json['IsRecycled'] == null ? undefined : json['IsRecycled'],
        'metadata': json['Metadata'] == null ? undefined : ((json['Metadata'] as Array<any>).map(RestJsonMetaFromJSON)),
        'mode': json['Mode'] == null ? undefined : RestModeFromJSON(json['Mode']),
        'modified': json['Modified'] == null ? undefined : json['Modified'],
        'path': json['Path'] == null ? undefined : json['Path'],
        'previews': json['Previews'] == null ? undefined : ((json['Previews'] as Array<any>).map(RestFilePreviewFromJSON)),
        'revisionMeta': json['RevisionMeta'] == null ? undefined : RestRevisionMetaFromJSON(json['RevisionMeta']),
        'shares': json['Shares'] == null ? undefined : ((json['Shares'] as Array<any>).map(RestShareLinkFromJSON)),
        'size': json['Size'] == null ? undefined : json['Size'],
        'storageETag': json['StorageETag'] == null ? undefined : json['StorageETag'],
        'subscriptions': json['Subscriptions'] == null ? undefined : ((json['Subscriptions'] as Array<any>).map(ActivitySubscriptionFromJSON)),
        'type': json['Type'] == null ? undefined : TreeNodeTypeFromJSON(json['Type']),
        'userMetadata': json['UserMetadata'] == null ? undefined : ((json['UserMetadata'] as Array<any>).map(RestUserMetaFromJSON)),
        'uuid': json['Uuid'] == null ? undefined : json['Uuid'],
    };
}

export function RestNodeToJSON(json: any): RestNode {
    return RestNodeToJSONTyped(json, false);
}

export function RestNodeToJSONTyped(value?: RestNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Activities': value['activities'] == null ? undefined : ((value['activities'] as Array<any>).map(ActivityObjectToJSON)),
        'ContentLock': RestLockInfoToJSON(value['contentLock']),
        'ContentType': value['contentType'],
        'ContentsHash': value['contentsHash'],
        'ContextWorkspace': RestContextWorkspaceToJSON(value['contextWorkspace']),
        'DataSourceFeatures': RestDataSourceFeaturesToJSON(value['dataSourceFeatures']),
        'FolderMeta': value['folderMeta'] == null ? undefined : ((value['folderMeta'] as Array<any>).map(RestCountMetaToJSON)),
        'HashingMethod': value['hashingMethod'],
        'ImageMeta': RestImageMetaToJSON(value['imageMeta']),
        'IsBookmarked': value['isBookmarked'],
        'IsRecycleBin': value['isRecycleBin'],
        'IsRecycled': value['isRecycled'],
        'Metadata': value['metadata'] == null ? undefined : ((value['metadata'] as Array<any>).map(RestJsonMetaToJSON)),
        'Mode': RestModeToJSON(value['mode']),
        'Modified': value['modified'],
        'Path': value['path'],
        'Previews': value['previews'] == null ? undefined : ((value['previews'] as Array<any>).map(RestFilePreviewToJSON)),
        'RevisionMeta': RestRevisionMetaToJSON(value['revisionMeta']),
        'Shares': value['shares'] == null ? undefined : ((value['shares'] as Array<any>).map(RestShareLinkToJSON)),
        'Size': value['size'],
        'StorageETag': value['storageETag'],
        'Subscriptions': value['subscriptions'] == null ? undefined : ((value['subscriptions'] as Array<any>).map(ActivitySubscriptionToJSON)),
        'Type': TreeNodeTypeToJSON(value['type']),
        'UserMetadata': value['userMetadata'] == null ? undefined : ((value['userMetadata'] as Array<any>).map(RestUserMetaToJSON)),
        'Uuid': value['uuid'],
    };
}

